<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[OwenYang'S Ideas]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://owenyang0.github.io/"/>
  <updated>2015-01-16T12:49:40.051Z</updated>
  <id>http://owenyang0.github.io/</id>
  
  <author>
    <name><![CDATA[Owen Yang]]></name>
    <email><![CDATA[usay@outlook.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ECMAScript 6中的数组操作方法]]></title>
    <link href="http://owenyang0.github.io/2015/01/04/ECMAScript-6%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>http://owenyang0.github.io/2015/01/04/ECMAScript-6中的数组操作方法/</id>
    <published>2015-01-04T14:20:25.000Z</published>
    <updated>2015-01-05T12:34:34.000Z</updated>
    <content type="html"><![CDATA[<p>本文介绍ECMAScript 6即将带给我们新的数组操作方法，以及在怎样在现有浏览器应用这些新的数组特性。</p>
<p><strong>Note:</strong> 我将使用交替使用构造器(constructor)和类(class)两个术语。</p>
<h2 id="类方法">类方法</h2>
<p>数组(Array)自身所拥有的方法。</p>
<h3 id="Array-from(arrayLike,_mapFunc?,_thisArg?)">Array.from(arrayLike, mapFunc?, thisArg?)</h3>
<p><code>Array.from()</code>的基本功能是，转换两种类型的对象成数组。</p>
<blockquote>
<p><strong>类数组对象(Array-like objects)</strong></p>
</blockquote>
<p>该类对象有长度与索引的属性。DOM操作符的结果即属于该类，如<code>document.getElementsByClassName()</code>。</p>
<blockquote>
<p><strong>可迭代对象(Iterable objects)</strong></p>
</blockquote>
<p>这类对象在取值时，每次只能取一个元素。数组是可迭代的，就如ECMAScript中新的数组结构，映射(Map)和集(Set)。</p>
<p>以下代码是一个转换类数组对象到数组的一个示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ul.fancy li'</span>);</div><div class="line"><span class="built_in">Array</span>.from(lis).forEach(<span class="function"><span class="keyword">function</span> <span class="params">(li)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(node);</div><div class="line">});</div></pre></td></tr></table></figure>

<p><code>querySelectorAll()</code>的结果不是一个数组，也不会有<code>forEach()</code>这个方法。这是我们需要在使用这个方法之前，将它转换成数组的原因。</p>
<p><strong>通过Array.from()使用Mapping</strong><br><code>Array.from()</code>同样也是一个泛型使用<code>map()</code>的替代选择。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> spans = <span class="built_in">document</span>.querySelectorAll(<span class="string">'span.name'</span>);</div><div class="line"></div><div class="line"><span class="comment">// map(), generically:</span></div><div class="line"><span class="keyword">let</span> names1 = <span class="built_in">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</div><div class="line"></div><div class="line"><span class="comment">// Array.from():</span></div><div class="line"><span class="keyword">let</span> names2 = <span class="built_in">Array</span>.from(spans, s =&gt; s.textContent);</div></pre></td></tr></table></figure>

<p>两个方法中的第二个参数，都是箭头函数(arrow function)。<br>在这个示例中，<code>document.querySelectorAll()</code>的结果又是一个类数组对象，而非数组。这就是我们不能直接调用<code>map()</code>的原因。第一个示例中，为了使用<code>forEach()</code>，我们将类数组对象转换成了数组。这里我们通过泛型方法和两个参数版本的<code>Array.from()</code>，而省去了中间步骤。</p>
<p><strong>Holes</strong><br><code>Array.from()</code>会忽略数组里缺失的元素 - 洞(holes)，它会以未定义的元素(undefined elements)进行对待。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">Array</span>.from([<span class="number">0</span>,,<span class="number">2</span>])</div><div class="line">[ <span class="number">0</span>, <span class="literal">undefined</span>, <span class="number">2</span> ]</div></pre></td></tr></table></figure>

<p>这就意味着，你可以使用<code>Array.from()</code>来创建或者填充一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>), () =&gt; <span class="string">'a'</span>)</div><div class="line">[ <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span> ]</div><div class="line">&gt; <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>), (x,i) =&gt; i)</div><div class="line">[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</div></pre></td></tr></table></figure>

<p>如果你想用一个固定的值去填充一个数组，那么<code>Array.prototype.fill()</code>(请看下文)将是一个更好的选择。第一个即是以上示例的两种方式。</p>
<p><strong>在数组(Array)子类中的from()</strong><br>另一个<code>Array.from()</code>的使用场景是，转换类数组对象或可迭代对象到一个数组(Array)子类的一个实例。如你创建了一个Array的子类MyArray，想将此类对象转化成MyArray的一个实例，你就可以简单地使用<code>MyArray.from()</code>。可以这样使用的原因是，在ECMAScript 6中构造器(constructors)会继承下去(父类构造器是它子类构造器的原型(prototype))。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MyArray extends <span class="built_in">Array</span> {</div><div class="line">  ...</div><div class="line">}</div><div class="line"><span class="keyword">let</span> instanceOfMyArray = MyArray.from(anIterable);</div></pre></td></tr></table></figure>

<p>你可以将该功能与映射(mapping)结合起来，在一个你控制结果构造器的地方完成映射操作(map operation)：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// from() – determine the result’s constructor via the receiver</span></div><div class="line"><span class="comment">// (in this case, MyArray)</span></div><div class="line"><span class="keyword">let</span> instanceOfMyArray = MyArray.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], x =&gt; x * x);</div><div class="line"></div><div class="line"><span class="comment">// map(): the result is always an instance of Array</span></div><div class="line"><span class="keyword">let</span> instanceOfArray   = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; x * x);</div></pre></td></tr></table></figure>

<h3 id="Array-of(…items)">Array.of(…items)</h3>
<p>如果你想将一组值转换成一个数组，你应该使用数组源文本(array literal)。特别是只有一个值且还是数字的时候，数组的构造器便罢工了。更多<a href="http://speakingjs.com/es5/ch18.html#array_constructor" target="_blank" rel="external">信息</a>请参考。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>)</div><div class="line">[ <span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span> ]</div><div class="line">&gt; <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</div><div class="line">[ , ,  ,]</div><div class="line">&gt; <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3.1</span>)</div><div class="line"><span class="built_in">RangeError</span>: Invalid array length</div></pre></td></tr></table></figure>

<p>便如果要将一组值转换成数字子构造器(sub-constructor)的一个实例，我们应该怎么做呢？这就是<code>Array.of()</code>存在的价值(记住，数组子构造器会继承所有的数组方法，当然也包括<code>of()</code>)。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MyArray extends <span class="built_in">Array</span> {</div><div class="line">  ...</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log(MyArray.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="keyword">instanceof</span> MyArray); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(MyArray.of(<span class="number">3</span>).length === <span class="number">1</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>

<p>把值包裹嵌套在数组里，<code>Array.of()</code>会相当方便，而不会有<code>Array()</code>一样怪异的处理方式。但也要注意<code>Array.prototype.map()</code>，此处有坑：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; [<span class="string">'a'</span>, <span class="string">'b'</span>].map(<span class="built_in">Array</span>.of)</div><div class="line">[ [ <span class="string">'a'</span>, <span class="number">0</span>, [ <span class="string">'a'</span>, <span class="string">'b'</span> ] ],</div><div class="line">[ <span class="string">'b'</span>, <span class="number">1</span>, [ <span class="string">'a'</span>, <span class="string">'b'</span> ] ] ]</div><div class="line">&gt; [<span class="string">'a'</span>, <span class="string">'b'</span>].map(x =&gt; <span class="built_in">Array</span>.of(x)) <span class="comment">// better</span></div><div class="line">[ [ <span class="string">'a'</span> ], [ <span class="string">'b'</span> ] ]</div><div class="line">&gt; [<span class="string">'a'</span>, <span class="string">'b'</span>].map(x =&gt; [x]) <span class="comment">// best (in this case)</span></div><div class="line">[ [ <span class="string">'a'</span> ], [ <span class="string">'b'</span> ] ]</div></pre></td></tr></table></figure>

<p>如你所看，<code>map()</code>会传递三个参数到它的回调里面。最后两个又是经常被忽略的(<a href="http://speakingjs.com/es5/ch15.html#_pitfall_unexpected_optional_parameters" target="_blank" rel="external">详细</a>)。</p>
<h2 id="原型方法(Prototype_methods)">原型方法(Prototype methods)</h2>
<p>数组的实例会有很多新的方法可用。</p>
<h3 id="数组里的迭代(Iterating_over_arrays)">数组里的迭代(Iterating over arrays)</h3>
<p>以下的方法，会帮助完成在数组里的迭代：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.entries()</div><div class="line"><span class="built_in">Array</span>.prototype.keys()</div><div class="line"><span class="built_in">Array</span>.prototype.values()</div></pre></td></tr></table></figure>

<p>以上的每一个方法都会返回一串值，却不会作为一个数组返回。它们会通过迭代器，一个接一个的显示。让我们看一个示例(我将使用<code>Array.from()将迭代器的内容放在数组中</code>)：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">Array</span>.from([ <span class="string">'a'</span>, <span class="string">'b'</span> ].keys())</div><div class="line">[ <span class="number">0</span>, <span class="number">1</span> ]</div><div class="line">&gt; <span class="built_in">Array</span>.from([ <span class="string">'a'</span>, <span class="string">'b'</span> ].values())</div><div class="line">[ <span class="string">'a'</span>, <span class="string">'b'</span> ]</div><div class="line">&gt; <span class="built_in">Array</span>.from([ <span class="string">'a'</span>, <span class="string">'b'</span> ].entries())</div><div class="line">[ [ <span class="number">0</span>, <span class="string">'a'</span> ],</div><div class="line">[ <span class="number">1</span>, <span class="string">'b'</span> ] ]</div></pre></td></tr></table></figure>

<p>你可以结合<code>entries()</code>和ECMAScript 6中的<code>for-of</code>循环，方便地将迭代对象拆解成key-value对：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] of [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) {</div><div class="line">  <span class="built_in">console</span>.log(index, elem);</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>Note:</strong> 这段代码已经可以在最新的Firefox浏览器里运行了。t Firefox.</p>
<h3 id="查找数组元素">查找数组元素</h3>
<p><code>Array.prototype.find(predicate, thisArg?)</code> 会返回满足回调函数的第一个元素。如果没有任何一个元素满足条件，它会返回<code>undefined</code>。比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; [<span class="number">6</span>, -<span class="number">5</span>, <span class="number">8</span>].find(x =&gt; x &lt; <span class="number">0</span>)</div><div class="line">-<span class="number">5</span></div><div class="line">&gt; [<span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>].find(x =&gt; x &lt; <span class="number">0</span>)</div><div class="line"><span class="literal">undefined</span></div></pre></td></tr></table></figure>

<p><code>Array.prototype.findIndex(predicate, thisArg?)</code><br>会返回满足回调函数的第一个元素的索引。如果找不任何满足的元素，则返回-1。比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; [<span class="number">6</span>, -<span class="number">5</span>, <span class="number">8</span>].findIndex(x =&gt; x &lt; <span class="number">0</span>)</div><div class="line"><span class="number">1</span></div><div class="line">&gt; [<span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>].findIndex(x =&gt; x &lt; <span class="number">0</span>)</div><div class="line">-<span class="number">1</span></div></pre></td></tr></table></figure>

<p>两个find*方法都会忽略洞(holes)，即不会关注undefined的元素。回调的完成函数签名是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">predicate(element, index, array)</div></pre></td></tr></table></figure>

<p><strong>通过findIndex()找NaN</strong></p>
<p><code>Array.prototype.indexOf()</code>有一个大家所熟知的限制，那就是不能查找NaN。因为它用恒等(===)查找匹配元素：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; [<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)</div><div class="line">-<span class="number">1</span></div></pre></td></tr></table></figure>

<p>使用<code>findIndex()</code>，你就可以使用<code>Object.is()</code>，这就不会产生这样的问题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; [<span class="literal">NaN</span>].findIndex(y =&gt; <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, y))</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>

<p>你同样也可以采用更通用的方式，创建一个帮助函数<code>elemIs()</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">elemIs</span><span class="params">(x)</span> </span>{ <span class="keyword">return</span> <span class="built_in">Object</span>.is.bind(<span class="built_in">Object</span>, x) }</div><div class="line">&gt; [<span class="literal">NaN</span>].findIndex(elemIs(<span class="literal">NaN</span>))</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>

<h3 id="Array-prototype-fill(value,_start?,_end?)">Array.prototype.fill(value, start?, end?)</h3>
<p>用所给的数值，填充一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</div><div class="line">[ <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span> ]</div></pre></td></tr></table></figure>

<p>洞(Holes)也不会有任何的特殊对待：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</div><div class="line">[ <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span> ]</div></pre></td></tr></table></figure>

<p>你也可以限制你填充的起始与结束：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line">[ <span class="string">'a'</span>, <span class="number">7</span>, <span class="string">'c'</span> ]</div></pre></td></tr></table></figure>

<h2 id="什么时候可以使用新的数组方法？">什么时候可以使用新的数组方法？</h2>
<p>有一些方法已经可以在浏览器里使用了。通过，你可以通过kangax查看兼容性<a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="external">ECMAScript 6 compatibility table</a>。</p>
<p>Paul Miller的 <a href="https://github.com/paulmillr/es6-shim" target="_blank" rel="external">es6-shim</a>库可以将ES6转换成ES5。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="http://www.2ality.com/2014/05/es6-array-methods.html" target="_blank" rel="external">http://www.2ality.com/2014/05/es6-array-methods.html</a></li>
<li><a href="http://speakingjs.com/es5/ch18.html#array_holes" target="_blank" rel="external">Holes in Arrays</a> (Speaking JavaScript)</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文介绍ECMAScript 6即将带给我们新的数组操作方法，以及在怎样在现有浏览器应用这些新的数组特性。</p>
<p><strong>Note:</strong> 我将使用交替使用构造器(constructor)和类(class)两个术语。</p>
<h2 id="类方]]>
    </summary>
    
      <category term="ES6" scheme="http://owenyang0.github.io/tags/ES6/"/>
    
      <category term="ECMAScript 6" scheme="http://owenyang0.github.io/tags/ECMAScript-6/"/>
    
      <category term="Array" scheme="http://owenyang0.github.io/tags/Array/"/>
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu上的Git Server]]></title>
    <link href="http://owenyang0.github.io/2014/12/24/Ubuntu%E4%B8%8A%E7%9A%84Git-Server/"/>
    <id>http://owenyang0.github.io/2014/12/24/Ubuntu上的Git-Server/</id>
    <published>2014-12-24T12:48:00.000Z</published>
    <updated>2014-12-28T14:08:42.000Z</updated>
    <content type="html"><![CDATA[<p>Git是一个开源的版本控制系统，由Linus Torvalds主导，用于支持Linux内核开发。每一个Git工作目录，都是一个完整的代码库，包含所有的提交历史。有能力跟踪所有的代码版本，而不会去依赖于网络与中央服务器。</p>
<h3 id="安装">安装</h3>
<p>Git可以通过以下的命令进行安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install git</div></pre></td></tr></table></figure>

<h3 id="配置">配置</h3>
<p>每一个git的用户，在第一次使用的时候都需要通过以下两个命令，进行相应的配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.email <span class="string">"you@example.com"</span></div><div class="line">git config --global user.name <span class="string">"Your Name"</span></div></pre></td></tr></table></figure>

<h3 id="基本用法">基本用法</h3>
<p>假设用户可以通过SSH的方式访问Server，对于用户想以分布式以及安全的方式使用Git，则已经完全足够了。在服务器端，创建一个新的仓库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init --bare /path/to/repository</div></pre></td></tr></table></figure>

<p>这会创建一个裸仓库，它不允许我们直接编辑相应的文件。如果你需要在服务器端保留仓库内容的复本，去掉 —bare 选项就好了。</p>
<p>任何具有SSH权限的客户端，均可以克隆相应的仓库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone username<span class="variable">@hostname</span><span class="symbol">:/path/to/repository</span></div></pre></td></tr></table></figure>

<p>一旦克隆到了客户端上，用户即可编辑相应的文件，然后提交得分享相应的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/repository <span class="comment"># 进入目录，编辑</span></div><div class="line">git commit <span class="operator">-a</span> <span class="comment"># 提交所有修改到本地仓库</span></div><div class="line">git push origin master <span class="comment"># 推送修改到服务器端的仓库</span></div></pre></td></tr></table></figure>

<h3 id="安装_gitolite_server">安装 gitolite server</h3>
<p>虽然以上的那些，对于创建，克隆和修改仓库已经足够。但用户在服务器端安装git，最主要是想要一个传统的源代码控制管理服务器，具有多用户与权限管理的功能。推荐的解决方案是通过以下命令，安装 gitolite server：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install gitolite</div></pre></td></tr></table></figure>

<h3 id="配置_gitolite">配置 gitolite</h3>
<p>相比于大多数的类Unix系统，gitolite server的配置有一些小小的区别。传统的配置文件会存放在 /etc 的目录之下，而gitolite则把自己的配置文件放在一个git的仓库之中。配置一个新的gitolite的第一步，则需要有配置仓库的访问权限。<br>首先，让我们为gitolite创建一个用户，并具体其访问权限。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> adduser --system --shell /bin/bash --group --disabled-password --home /home/git git</div></pre></td></tr></table></figure>

<p>现在我们想让gitolite知晓仓库管理员的SSH公钥。我们假设当前用户是仓库的管理员。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp ~<span class="regexp">/.ssh/id</span>_rsa.pub /tmp/<span class="variable">$(</span>whoami).pub</div></pre></td></tr></table></figure>

<p>我们切换到git用户，并将管理员的公钥导入gitolite。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">sudo</span> su - git</div><div class="line">gl-setup /tmp/<span class="regexp">*.pub</span></div></pre></td></tr></table></figure>

<p>Gitolite会允许在安装过程中，对配置文件做一些初期的修改。你现在可以通过管理员用户(即拥有管理员公钥的帐户)，克隆和修改gitolite的配置仓库。切回到管理员账号，克隆配置仓库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exit</div><div class="line">git clone git@<span class="variable">$IP_ADDRESS</span><span class="symbol">:gitolite-admin</span>.git</div><div class="line">cd gitolite-admin</div></pre></td></tr></table></figure>

<p>gitolite-admin目录包含两个子目录，conf 和 keydir。配置文件存放在 conf目录，而keydir目录存放了用户的公钥信息。</p>
<h3 id="管理gitolite帐户和仓库">管理gitolite帐户和仓库</h3>
<p>添加一个新的帐户到gitolite很简单：只需要获取用户的SSH公钥信息，以$DESIRED_USER_NAME.pub 的形式放在keydir目录之下即可。值得注意的是，gitolite的用户名不必和系统的用户名相匹配，它们仅仅是用在gitolite的配置文件之中，管理其访问权限的。同样的，删除用户只需要删除其对应的公钥文件即可。所有修改完毕之后，别忘了提交相应的修改，然后通过以下命令推回服务器端：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="operator"><span class="keyword">commit</span> -a</span></div><div class="line">git push origin <span class="keyword">master</span></div></pre></td></tr></table></figure>

<p>仓库是需要编辑conf/gitolite.conf文件进行管理。通过空格分割，遵守相应的权限规则，指定相应的仓库即可。以下是一些默认的示例。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">repo    gitolite-admin</div><div class="line"><span class="constant">        RW+</span>     =   admin</div><div class="line"><span class="constant">        R</span>       =   alice</div><div class="line">repo    project1</div><div class="line"><span class="constant">        RW+</span>     =   alice</div><div class="line"><span class="constant">        RW</span>      =   bob</div><div class="line"><span class="constant">        R</span>       =   denise</div></pre></td></tr></table></figure>

<h3 id="使用服务器">使用服务器</h3>
<p>要使用新创建的帐户，用户需要gitolite的管理员将其公钥导入到gitolite的配置仓库之中。然后，用户即可拥有相应的项目权限：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> git@<span class="variable">$SERVER_IP</span>:<span class="variable">$PROJECT_NAME</span>.git</div></pre></td></tr></table></figure>

<p>或者为一个已存在的git仓库添加一个远程地址：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> remote add gitolite git@<span class="variable">$SERVER_IP</span>:<span class="variable">$PROJECT_NAME</span>.git</div></pre></td></tr></table></figure>

<p>如此便搭好了一个简易的，可用的git server。为了更好的查看相应的代码，或者管理，也可使用相对较重的，gitlab开源项目。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Git是一个开源的版本控制系统，由Linus Torvalds主导，用于支持Linux内核开发。每一个Git工作目录，都是一个完整的代码库，包含所有的提交历史。有能力跟踪所有的代码版本，而不会去依赖于网络与中央服务器。</p>
<h3 id="安装">安装</h3>
<p>]]>
    </summary>
    
      <category term="ubuntu" scheme="http://owenyang0.github.io/tags/ubuntu/"/>
    
      <category term="git" scheme="http://owenyang0.github.io/tags/git/"/>
    
      <category term="git server" scheme="http://owenyang0.github.io/tags/git-server/"/>
    
      <category term="gitolite" scheme="http://owenyang0.github.io/tags/gitolite/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css - position relative与display table-cell深入分析]]></title>
    <link href="http://owenyang0.github.io/2014/12/14/css-position-relative%E4%B8%8Edisplay-table-cell%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>http://owenyang0.github.io/2014/12/14/css-position-relative与display-table-cell深入分析/</id>
    <published>2014-12-14T07:44:18.000Z</published>
    <updated>2014-12-14T07:49:50.000Z</updated>
    <content type="html"><![CDATA[<p>在很多时候，想使用 <code>display: table;</code> 以及其子元素使用 <code>display: table-cell</code> 都只是为了使用 <code>vertical-align</code> 这一属性。这是一个很简单的常识，但这次在项目上使用却产生意想不到的表现方式。</p>
<p>因为我在其中又使用了 <code>position: relative;</code> 这样一个属性。同样是一个很简单而标准的属性，我想即使放在一起，肯定也是可以正常工作的。可惜，我错了。</p>
<h2 id="缘起">缘起</h2>
<p>就这样的一个简单的样式场景，</p>
<p><strong>Chrome</strong><br><img src="/images/lists.png" alt="lists"><br><strong>FireFox</strong><br><img src="/images/lists-ff.png" alt="lists"></p>
<p>看着两个图不一样，很难受是吧？开始的时候，即用的是 <code>vertical-align: top;</code> 使用 <code>position: relative;</code>去修这样一个位置。因为icon没有 <code>padding</code>，而文字却是有 <code>line-height</code> 的。直接使用vertical-align: top; 是不够雅观的，必须往下移大概3个px。我就用position: relative; 去调整了一下(当然，使用 <code>padding-top: 3px;</code>的话，就没这么多的后话了)。</p>
<p>做为一个开发者，一般说来都会习惯用Chrome或者FF调试自己的样式。而幸运的是，我用的是Chrome，Chrome对很多东西都支持很好，我用了position: relative; 在Chrome调好了样式。这就导致了在Chrome上很好的东西，到其他浏览器的时候会丑得像一堆X一样。到FF上的时候，发现这些位置根本不工作。</p>
<h2 id="代码">代码</h2>
<p>客户的代码还是就算了，随便写个demo代码吧。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"table"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"cell"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"cell cell-icon"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>



<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class">.table</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ccc</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.cell</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ccc</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> table-cell</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> top</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.cell-icon</span><span class="pseudo">:before</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">"icon"</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.cell-icon</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">20px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>目的只是为了让 <code>top: 20px;</code> 工作而已，不用去管它现在是否为业务价值。当然，在客户那里是肯定有价值的。经过测试：</p>
<p><strong>WORK：</strong><br>Chrome |<br>Safari |<br>IE 8+</p>
<p>唯FireFox不行，根本不关心你是否有此(position: relative;)属性。</p>
<h2 id="过程">过程</h2>
<p>遇到这种情况，当然去查找相关资料，最后查到了CSS规范: <a href="http://www.w3.org/TR/CSS21/visuren.html#choose-position" target="_blank" rel="external">choose-position</a>。里面有一句:</p>
<blockquote>
<p>The effect of ‘position:relative’ on table-row-group, table-header-group, table-footer-group, table-row, table-column-group, table-column, table-cell, and table-caption elements is undefined.</p>
</blockquote>
<p>大致一意思就是说：<code>position: relative;</code>在table-cell或者其他table元素下都是不工作的，醒醒吧少年。</p>
<p>实际的情况是：有些浏览器又允许用户在table-cell里使用绝对或者相对定位(在这里可以看到更多详细信息<a href="http://www.w3.org/TR/CSS21/visuren.html#comp-abspos" target="_blank" rel="external">http://www.w3.org/TR/CSS21/visuren.html#comp-abspos</a>)。但浏览器又有权不实现那些开发者想要的规范，毕竟这些都不在W3定义的规范里面。</p>
<p>所以，到这里已经明了了，不是由于FF不给力，而确实是由于规范里面没有这样要求，那么剩下的，我们去寻找真正的解决办法就好了。</p>
<h2 id="解决">解决</h2>
<p><strong>1.</strong><br>以上其实提到过，可以跳过 <code>position: relative;</code>，直接就用 <code>padding-top: 20px;</code> 就好了。但这明显不能满足我们的好奇心。所以，请看方法二。</p>
<p><strong>2.</strong><br>这需要在table-cell里面在包一层，在这层限定这的position就好了。然后，所有浏览器测试一遍，搞定。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"table"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"cell"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"cell"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"cell-icon"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><a href="http://owenyang0.github.io/Snippets/html/table-cell/" target="_blank" rel="external">Demo</a></p>
<p>或者有人会觉得简单，我觉得不。这些都只是经验型的东西，如果此前没遇到过，或许你会花很长时间去搞明白到底是怎么一回事。这在所有的事情面前都是一样的。</p>
<p>所以，保持学习，努力填坑。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在很多时候，想使用 <code>display: table;</code> 以及其子元素使用 <code>display: table-cell</code> 都只是为了使用 <code>vertical-align</code> 这一属性。这是一个很简单的常识，但这次在]]>
    </summary>
    
      <category term="css" scheme="http://owenyang0.github.io/tags/css/"/>
    
      <category term="table-cell" scheme="http://owenyang0.github.io/tags/table-cell/"/>
    
      <category term="display" scheme="http://owenyang0.github.io/tags/display/"/>
    
      <category term="position" scheme="http://owenyang0.github.io/tags/position/"/>
    
      <category term="relative" scheme="http://owenyang0.github.io/tags/relative/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AEM - Adobe CMS 扒坑记之始]]></title>
    <link href="http://owenyang0.github.io/2014/12/13/AEM-Adobe-CMS-%E6%89%92%E5%9D%91%E8%AE%B0%E4%B9%8B%E5%A7%8B/"/>
    <id>http://owenyang0.github.io/2014/12/13/AEM-Adobe-CMS-扒坑记之始/</id>
    <published>2014-12-13T08:02:06.000Z</published>
    <updated>2014-12-13T09:46:05.000Z</updated>
    <content type="html"><![CDATA[<p>AEM是Adobe公司所出的商业内容管理系统，全称<strong>阿豆比体验管理系统</strong>(Adobe Experience Manager)，其前身叫<strong>CQ</strong>，分别有<code>CQ5</code> <code>CQ6</code>两个大版本。它提供了整套的网站内容管理系统解决方案，是一个企业级的重型系统。当然，这套系统在中国几乎没什么人知晓。但在澳洲，这系统几乎在所有金融行业遍地开花了。</p>
<p>基于客户的发展战略，不可避免地开始了<code>AEM</code>的扒坑之旅。不过，此前一直在扒<code>Drupal</code>的坑，再扒一堆坑也无关紧要了。</p>
<h2 id="AEM_技术栈">AEM 技术栈</h2>
<p><img src="/images/cq_technology_stack.png" alt="stack" title="cq5 technology stack"></p>
<h3 id="Apache_Sling">Apache Sling</h3>
<p><code>Apache Sling</code> 是一个以内容为中心的网络框架。其使用Java的内容仓库去存储与管理内容，比如<code>Apache Jackrabbit</code> 和 <code>CRX</code>。</p>
<blockquote>
<ul>
<li>基于<code>REST</code>原则，以内容为导向进行开发</li>
<li>与<code>CQ5</code>(或者说<code>AEM5, 6</code>)天然集成</li>
<li>用于处理<code>HTTP</code>的渲染与<code>数据存储</code>的请求。这是一种新的方式，它将在后台将内容组装，渲染最终将其呈现给用户</li>
<li>能将内容对象与处理数据的组成映射起来</li>
<li>支持服务端与<code>AJAX</code>请求</li>
<li>支持多种脚本语言(比如，JSP, ESP, Ruby等)</li>
<li><em>注</em> <a href="http://incubator.apache.org/projects/sling.html" target="_blank" rel="external">http://incubator.apache.org/projects/sling.html</a> 查看更多关于<code>Sling</code>的信息</li>
</ul>
</blockquote>
<hr>
<h3 id="OSGi_(Apache_Felix)">OSGi (Apache Felix)</h3>
<p>CQ5 内建了基于<code>OSGI R4 服务平台</code>(OSGi Service Platform Release 4) 的应用程序框架。</p>
<blockquote>
<ul>
<li>是一个针对<code>JAVA</code>的动态模块系统</li>
<li>发展自通用中间键。很多第三方的组件可以以bundle的形式进行复用</li>
<li>OSGI的bundle可以包含经编译后的JAVA代码，脚本，或者内容。这些均可根据需要将其加载到相应的仓库，或者对其进行配置等等。</li>
</ul>
</blockquote>
<h2 id="获得软件">获得软件</h2>
<p>所有需要的，只是一个可独立执行的jar包。由于是商业软件，License是必须的。我们将其放到一个文件夹下，暂且命名为<code>aem-install</code>吧。<br><img src="/images/aem-dir.png" alt="aem-dir" title="AEM directory structure"></p>
<p>关于目录下的 <code>crx-quickstart</code> 是当你启动后，自动生成的。里面包含了，你开发所需要的所有，包含所有的内容，以及配置等等。</p>
<h3 id="准备">准备</h3>
<p>AEM 是一个基于<code>JAVA</code>跨平台的系统，所以<code>OS X</code>, <code>桌面版 Windows</code>, <code>Linux</code>肯定都可以支持啦。</p>
<p>唯一需要注意的是，AEM运行在<code>JAVA 7</code>上。所以如果你是用的<code>JAVA 8</code>，但却装有<code>JAVA 7</code>的话，只需要切换一下<code>JAVA_HOME</code>。将这条命令放在你的 <code>.bashrc</code> 或者<code>.zshrc</code> source一下就搞定啦。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export JAV<span class="built_in">A_HOME</span>=<span class="escape">`/</span>usr/libexec/jav<span class="built_in">a_home</span> -v <span class="number">1.7</span>`</div></pre></td></tr></table></figure>

<h3 id="启动">启动</h3>
<p>好的，一准备工作就绪，那么我们就开始我们的正式启动。比如有趣的是，Adobe提供了两种方法供我们使用。</p>
<blockquote>
<p><strong>1. 控制台</strong></p>
<p>不用说，作为一个职业代码人，我们还是比较喜欢这样的方式的。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -Xmx1024M -jar <span class="keyword">cq</span>-author-p4502.jar -<span class="keyword">p</span> <span class="number">4502</span> -<span class="keyword">r</span> author</div></pre></td></tr></table></figure>

<p>其中，以下两个参数是可省的，因为默认的参数就是 <strong>端口 4502</strong>，<strong>模式 author</strong>。当然，如果你的电脑足够强大，<strong>-Xmx1024M</strong> 也是可以省的。</p>
<blockquote>
<ul>
<li><code>-p</code>指的是工作端口</li>
<li><code>-r</code>指的是启动模式。常见的模式有<code>author</code> 与 <code>publish</code>两种。当然还有其他的，用得不多就此略过罢</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>2. GUI 双击</strong></p>
<p>当然，有时为了方便，也可以直接双击<code>cq-author-p4502.jar</code>启动。只是有几个需要注意的地方。</p>
</blockquote>
<p>默认的情况，是以<code>author</code>模式，启动在<code>localhost:4502</code>。但我们可以在启动以前，通过修改jar包的名字，达到不同模式不同端口的效果。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cq</span>-&lt;instance-<span class="built_in">type</span>&gt;-<span class="keyword">p</span>&lt;port-<span class="keyword">number</span>&gt;.jar</div></pre></td></tr></table></figure>

<p>比如，修改成</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cq</span>-author-p4502.jar</div></pre></td></tr></table></figure>

<p>启动，这就达到了以<code>author</code>模式启动，端口设置在 <code>4502</code>的效果。<br>同理，修改成</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cq</span>-publish-p4503.jar</div></pre></td></tr></table></figure>

<p>启动，就将以<code>publish</code>的模式启动，端口是<code>4503</code>。<br>理想的情况是，你需要同时启动两个<code>instance</code>，只需要把jar包和license文件放在相应目录下就可以了。如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">aem-install</span>&gt;</span>/author</div><div class="line">和</div><div class="line"><span class="tag">&lt;<span class="title">aem-install</span>&gt;</span>/publish</div></pre></td></tr></table></figure>

<h3 id="就绪">就绪</h3>
<p>当AEM启动后，会自动打开浏览器定位到相应的页面。比如，我的是<code>localhost:4502</code>。以<code>admin:admin</code>登陆就可以开始正式的开发之路了。<br><img src="/images/crx_de.png" alt="crx-de" title="crx/de"></p>
<h2 id="小结">小结</h2>
<p>那么就此开始，我们已经扒完了AEM的第一坑了，AEM的填坑之路就正式开始了。接下来几篇，我将着重在开发之上，讲解一下AEM的整个开发流程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AEM是Adobe公司所出的商业内容管理系统，全称<strong>阿豆比体验管理系统</strong>(Adobe Experience Manager)，其前身叫<strong>CQ</strong>，分别有<code>CQ5</code> <code>CQ6</code]]>
    </summary>
    
      <category term="AEM" scheme="http://owenyang0.github.io/tags/AEM/"/>
    
      <category term="CMS" scheme="http://owenyang0.github.io/tags/CMS/"/>
    
      <category term="Drupal" scheme="http://owenyang0.github.io/tags/Drupal/"/>
    
      <category term="Adobe" scheme="http://owenyang0.github.io/tags/Adobe/"/>
    
      <category term="Experience Management" scheme="http://owenyang0.github.io/tags/Experience-Management/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Change Tab Title with JavaScript]]></title>
    <link href="http://owenyang0.github.io/2014/12/11/Change-Tab-Title-with-JavaScript/"/>
    <id>http://owenyang0.github.io/2014/12/11/Change-Tab-Title-with-JavaScript/</id>
    <published>2014-12-11T02:38:11.000Z</published>
    <updated>2014-12-11T02:50:04.000Z</updated>
    <content type="html"><![CDATA[<p>修改tab或者window的标题，是一项较老的实践。<code>Gmail</code> 用它来提示用户新的聊天消息，当有新的page通过<code>AJAX</code>加载的时候，本站同样用它更新<code>tab title</code>。这是怎样做到的呢？当时是通过设置<code>document</code>对象。</p>
<figure class="highlight JavaScript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.title = <span class="string">'Hello!'</span>; <span class="comment">// New title :)</span></div></pre></td></tr></table></figure>

<p>有一个常识性的错误是：你会以为应该去修改 <code>window.title</code>。但实际上，你应该使用<code>document</code>对象，否则你做的肯定是无用的。注意一下，你将会看到：很多时候会用 <code>setInterval</code>来实际更新 <code>document.title</code>，用以引起用户的注意！</p>
<p><strong>原文：</strong><a href="http://davidwalsh.name/change-title-javascript" target="_blank" rel="external">Change Tab Title with JavaScript</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>修改tab或者window的标题，是一项较老的实践。<code>Gmail</code> 用它来提示用户新的聊天消息，当有新的page通过<code>AJAX</code>加载的时候，本站同样用它更新<code>tab title</code>。这是怎样做到的呢？当时是通过]]>
    </summary>
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="Tab" scheme="http://owenyang0.github.io/tags/Tab/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript TDD with Mocha]]></title>
    <link href="http://owenyang0.github.io/2014/12/04/JavaScript-TDD-with-Mocha/"/>
    <id>http://owenyang0.github.io/2014/12/04/JavaScript-TDD-with-Mocha/</id>
    <published>2014-12-03T16:37:41.000Z</published>
    <updated>2014-12-03T16:47:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="开发现状">开发现状</h3>
<p>当新的版本快要发布的时候，大家都忙于加班，加紧修复BUG1、BUG2。我想这就是很多公司开发的现状。<br>为了不至于让上线的版本挂掉挂掉，少不了就是 <code>人肉测试</code>。<br>在一个项目中，我们会做许许多多各种各样的测试，这些测试都必不可少的。测试是项目成功不可或缺的一部分。但 <code>人肉测试</code> 不在本博的讨论范围。</p>
<p>测试大体分为以下几类</p>
<blockquote>
<ul>
<li>单元测试</li>
<li>集成测试</li>
<li>功能测试</li>
</ul>
</blockquote>
<h3 id="测试驱动开发">测试驱动开发</h3>
<p>TDD(Test-Driven Development) 从根本上改变了传统的开发模式，它要求你在写代码之前就写好测试，而不仅仅是待你写你代码以后的用作验证的目的。<br>TDD将测试提到了应用设计的阶段，在这期间你应该用你的测试理清你写代码时的思路，我们称作 <code>Tasking</code>.</p>
<p>以下是TDD开发时的基本要点</p>
<blockquote>
<ol>
<li>Tasking (将项目需要拆分成小的task)</li>
<li>Red (写测试代码，让其失败，变红)</li>
<li>Green (写实现代码，让其通过，变绿)</li>
<li>Refactor (重构，消失代码中的bad smell)</li>
<li>Repeat (重复以上步骤)</li>
</ol>
</blockquote>
<p>这就是TDD开发过程中的基本过程，我们就在 “红-绿-红-绿” 中完成我们的软件开发。</p>
<h3 id="JavaScript_TDD">JavaScript TDD</h3>
<p>笔者将通过编写一个传统游戏的方式，来完成一个 JavaScript TDD 的实践。  </p>
<p><strong>4 digits</strong><br>是一个猜数字游戏。在国外称为公牛和母牛，在中国人们就叫它猜数字。游戏的目标是在八次内用尽可能短的时间猜出一个随机的四位数：</p>
<blockquote>
<ul>
<li>顺序与大小都相同的用 A 表示  </li>
<li>大小相同，但顺序不同用 B 表示</li>
</ul>
</blockquote>
<p><strong>比如</strong> 输入 1234 | 猜数 2156 | 结果 0A2B</p>
<p>这是曾经在文曲星上有过的游戏，网友做过一个GUI版的，大家可以看下截图：<br><img src="/images/digits.png" alt="4digits">   </p>
<p>当然，本文的重点是 JavaScript TDD, 不是去实现一个太过细节逻辑。我们就把需求稍微改写一下：</p>
<blockquote>
<ul>
<li>四位数先给定</li>
<li>仅做算法处理(比较所猜数字与给定数字)</li>
</ul>
</blockquote>
<h4 id="开发准备">开发准备</h4>
<blockquote>
<ul>
<li>Node  </li>
<li>Mocha</li>
</ul>
</blockquote>
<p>如果不知道 <code>Node</code>, 估计你暂时还不用写 <code>JavaScript</code>。所以，本篇文章可能还不太适合你。</p>
<p><img src="/images/mocha.png" alt="Mocha"><br><a href="http://visionmedia.github.io/mocha/" target="_blank" rel="external">摩卡</a>是一个功能丰富的运行在 <code>Node</code> 和浏览器上的JavaScript测试框架。它允许你使用你任意喜欢的断言库。比如</p>
<blockquote>
<ul>
<li>should.js</li>
<li>chai</li>
<li>expect.js</li>
<li>better-assert</li>
</ul>
</blockquote>
<p>本次工程就选择 <a href="https://github.com/visionmedia/should.js" target="_blank" rel="external">should.js</a>吧，写TDD很优美，下面正式开发我们的TDD之旅。</p>
<h4 id="工程建立">工程建立</h4>
<pre><code>mkdir -p digits/{src,test}
cd digits
touch src/digits.js test/digitsSpec.js
npm init
npm <span class="operator"><span class="keyword">install</span> -g mocha
npm <span class="keyword">install</span> should <span class="comment">--save-dev</span></span>
</code></pre><p>工程就是这样搭建完成了，我们可以来看一下目录结构(<br>我把node_modules目录隐藏了)：<br><img src="/images/catalog.png" alt="Catalog"></p>
<p>就这样，我们就可以直接运行</p>
<pre><code><span class="title">mocha</span> 
</code></pre><p>跑测试了。当然，我们什么代码都没有写，当时没有测试可以跑，所以结果会是一个 <code>0 passing</code>。那我们正式开始吧。</p>
<h4 id="测试代码编写">测试代码编写</h4>
<p>先写出我们的第一个测试用例吧。<br>如果输入数字，或者所给数字的长度都不等于4，则返回-1。</p>
<pre><code><span class="keyword">var</span> should = <span class="built_in">require</span>(<span class="string">'should'</span>),
  Digits = <span class="built_in">require</span>(<span class="string">'../src/digits'</span>).Digits;

describe(<span class="string">'Digits'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
  <span class="comment">// Digits.compare(inputNum, givenNum);</span>
  describe(<span class="string">'#compare()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
    it(<span class="string">'should return -1 when input and given number length isnt 4'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      Digits.compare(<span class="string">'123'</span>, <span class="string">''</span>).should.equal(-<span class="number">1</span>);
      Digits.compare(<span class="string">'123'</span>, <span class="literal">null</span>).should.equal(-<span class="number">1</span>);
      Digits.compare(<span class="string">'123'</span>, <span class="string">'1234'</span>).should.equal(-<span class="number">1</span>);
      Digits.compare(<span class="literal">null</span>, <span class="string">'1234'</span>).should.equal(-<span class="number">1</span>);
    });
  });
});
</code></pre><p>嗯，代码看起来不错，我们尝试着 <code>mocha</code> 跑一下。啊哦，意料之中，变红了：<img src="/images/mocha_error.png" alt="mocha error"></p>
<p>什么原因喃？原来我们根本没有写实现代码，你这不废话么？确实是这样，这就是TDD中的第一步，<strong>红</strong>。接下来，我们就编写一些代码，让它变绿吧。</p>
<h4 id="实现代码编写">实现代码编写</h4>
<p>我们定义一个简单的Digits的function吧，通过 <code>exports.Digits = Digits;</code> 将函数接口暴露出去。就像这样：</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Digits</span><span class="params">()</span> </span>{}

Digits.compare = <span class="function"><span class="keyword">function</span><span class="params">(inputNum, givenNum)</span> </span>{
  <span class="keyword">var</span> len = <span class="number">4</span>;

  <span class="keyword">if</span> (inputNum === <span class="literal">null</span> ||
    givenNum === <span class="literal">null</span> ||
    inputNum.length !== len ||
    givenNum.length !== len) {
    <span class="keyword">return</span> -<span class="number">1</span>;
  }
}

exports.Digits = Digits;
</code></pre><p>看吧，看起来也很不错的样子，那我们继续跑一下测试吧。啊哈，意料之中，变<strong>绿</strong>了：<img src="/images/mocha_success.png" alt="mocha success"></p>
<h4 id="repeat">repeat</h4>
<p>由红变绿之后，这个task也就相当于是完成了。我们又可以按照这样的一个步骤，再写新的测试，然后再将它实现出来。到此为止，一个基本的 JavaScript TDD流程也就完了，趁着热乎劲儿。我们把这个 <code>compare</code> 函数的其他测试也一并写了吧。代码如下：</p>
<p><strong>digitsSepc.js</strong></p>
<pre><code><span class="keyword">var</span> should = <span class="built_in">require</span>(<span class="string">'should'</span>),
  Digits = <span class="built_in">require</span>(<span class="string">'../src/digits'</span>).Digits;

describe(<span class="string">'Digits'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
  <span class="comment">// Digits.compare(inputNum, givenNum);</span>
  describe(<span class="string">'#compare()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
    it(<span class="string">'should return -1 when input and given number length isnt 4'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      Digits.compare(<span class="string">'123'</span>, <span class="string">''</span>).should.equal(-<span class="number">1</span>);
      Digits.compare(<span class="string">'123'</span>, <span class="literal">null</span>).should.equal(-<span class="number">1</span>);
      Digits.compare(<span class="string">'123'</span>, <span class="string">'1234'</span>).should.equal(-<span class="number">1</span>);
      Digits.compare(<span class="literal">null</span>, <span class="string">'1234'</span>).should.equal(-<span class="number">1</span>);
    });

    it(<span class="string">'should return 4A0B when input numbers matched given numbers'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      Digits.compare(<span class="string">'1234'</span>, <span class="string">'1234'</span>).should.equal(<span class="string">'4A0B'</span>);
      Digits.compare(<span class="string">'5678'</span>, <span class="string">'5678'</span>).should.equal(<span class="string">'4A0B'</span>);
    });

    it(<span class="string">'should return 2A2B when 2 input numbers matched given numbers, and other 2 exist but not the right order'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      Digits.compare(<span class="string">'2134'</span>, <span class="string">'1234'</span>).should.equal(<span class="string">'2A2B'</span>);
      Digits.compare(<span class="string">'1324'</span>, <span class="string">'1234'</span>).should.equal(<span class="string">'2A2B'</span>);
      Digits.compare(<span class="string">'3214'</span>, <span class="string">'1234'</span>).should.equal(<span class="string">'2A2B'</span>);
      Digits.compare(<span class="string">'4231'</span>, <span class="string">'1234'</span>).should.equal(<span class="string">'2A2B'</span>);
    });

    it(<span class="string">'should return 2A0B when 2 input numbers matched given numbers, and other 2 was wrong numbers'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
      Digits.compare(<span class="string">'1256'</span>, <span class="string">'1234'</span>).should.equal(<span class="string">'2A0B'</span>);
      Digits.compare(<span class="string">'7238'</span>, <span class="string">'1234'</span>).should.equal(<span class="string">'2A0B'</span>);
      Digits.compare(<span class="string">'7834'</span>, <span class="string">'1234'</span>).should.equal(<span class="string">'2A0B'</span>);
      Digits.compare(<span class="string">'1784'</span>, <span class="string">'1234'</span>).should.equal(<span class="string">'2A0B'</span>);
    });
  });
});
</code></pre><p><strong>digits.js</strong></p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Digits</span><span class="params">()</span> </span>{}

Digits.compare = <span class="function"><span class="keyword">function</span><span class="params">(inputNum, givenNum)</span> </span>{
  <span class="keyword">var</span> len = <span class="number">4</span>,
    aCount = <span class="number">0</span>,
    bCount = <span class="number">0</span>;

  <span class="keyword">if</span> (inputNum === <span class="literal">null</span> ||
    givenNum === <span class="literal">null</span> ||
    inputNum.length !== len ||
    givenNum.length !== len) {
    <span class="keyword">return</span> -<span class="number">1</span>;
  }

  <span class="keyword">if</span> (inputNum === givenNum) {
    <span class="keyword">return</span> <span class="string">'4A0B'</span>;
  }

  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) {
    <span class="keyword">if</span> (inputNum[i] === givenNum[i]) {
      aCount++;
    } <span class="keyword">else</span> <span class="keyword">if</span> (givenNum.indexOf(inputNum[i]) !== -<span class="number">1</span>) {
      bCount++;
    }
  }

  <span class="keyword">return</span> aCount + <span class="string">'A'</span> + bCount + <span class="string">'B'</span>;
}

exports.Digits = Digits;
</code></pre><p>最后再来跑一遍 <code>mocha -R spec</code>，结果如下(大功告成啦)：<img src="/images/mocha_successes.png" alt="mocha successes"></p>
<h3 id="结语">结语</h3>
<p>大功告成了，此时的你其实可以洗洗睡了，不用再担心你的程序有问题啦。你的测试告诉你，你的程序都是绿色可行的。当然，如果你测试写有的问题就别当别说咯。<br>测试代码会有一些什么好处呢？</p>
<blockquote>
<ul>
<li>测试代码在那里，可以保证你以后修改代码时，或者重构时不会对已有的功能产生影响。</li>
</ul>
</blockquote>
<p>这条是很重要的，也是相当重要的。如果没有测试代码的保证，你无从知道你自己所改的代码，对已有的代码会产生什么样的影响。与其每次上线时都得加班改BUG，为啥不先写好测试，上线时早些洗洗睡了呢？</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="开发现状">开发现状</h3>
<p>当新的版本快要发布的时候，大家都忙于加班，加紧修复BUG1、BUG2。我想这就是很多公司开发的现状。<br>为了不至于让上线的版本挂掉挂掉，少不了就是 <code>人肉测试</code>。<br>在一个项目中，我们会做许许多多]]>
    </summary>
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="TDD" scheme="http://owenyang0.github.io/tags/TDD/"/>
    
      <category term="Mocha" scheme="http://owenyang0.github.io/tags/Mocha/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈JavaScript闭包]]></title>
    <link href="http://owenyang0.github.io/2014/03/02/%E6%B5%85%E8%B0%88JavaScript%E9%97%AD%E5%8C%85/"/>
    <id>http://owenyang0.github.io/2014/03/02/浅谈JavaScript闭包/</id>
    <published>2014-03-02T15:25:00.000Z</published>
    <updated>2014-12-27T15:55:24.000Z</updated>
    <content type="html"><![CDATA[<p>JavaScript函数是将要执行的<strong>代码</strong>及执行这些代码的<strong>作用域</strong>构成的一个综合体。计算机术语称这种代码和作用域的综合体为<strong>闭包</strong>。故所有JavaScript函数都是闭包。但我们常说的JavaScript闭包是指，一个嵌套函数被导出到它所定义的作用域外时，才明确地称为<strong>闭包</strong>。</p>
<h2 id="JavaScript闭包">JavaScript闭包</h2>
<p>闭包是 <code>JavaScript</code> 一个非常重要的特性，这意味着当前作用域总是能够访问外部作用域中的变量。 因为<strong>函数</strong>是 <code>JavaScript</code> 中唯一拥有自身作用域的结构，因此闭包的创建<strong>依赖于</strong>函数。</p>
<h2 id="简单写法">简单写法</h2>
<p>该函数的私有持久变量，可以被多个函数共享</p>
<pre><code><span class="keyword">var</span> uniqueID = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
    <span class="comment">// 私有持久值</span>
    <span class="keyword">var</span> id = <span class="number">0</span>;
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> id++;
    }
})();
</code></pre><h2 id="循环中的闭包">循环中的闭包</h2>
<p>一个常见的错误出现在<strong>循环</strong>中使用闭包，开发人员在循环语句里创建函数（内部计数）时经常得不到预期的结果，假设我们需要在每次循环中调用循环<strong>序号</strong></p>
<pre><code><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {
    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
        <span class="built_in">console</span>.log(i);  
    }, <span class="number">1000</span>);
}
</code></pre><p>所输入的内容不是 <code>0-9</code>，取而代之的是打印10次 <code>10</code>。<br>关键原因，在调用<code>console.log(i)</code>时，循环已经结束，同一个上下文中创建的闭包是共用一个[[Scope]]属性，导致<strong>i</strong>已经被修改成了<code>10</code>。<br>在ECMAScript中，同一个父上下文中创建的闭包是共用一个<code>[[Scope]]</code>属性的。也就是说，某个闭包对其中[[Scope]]的变量做修改会影响到其他闭包对其变量的读取。</p>
<h2 id="解决方式">解决方式</h2>
<p>避免引用错误，获取正确序号。我们需要引入自执行函数，包裹一下。传入就是<code>i</code>的拷贝，这样就能获取正确的输出。</p>
<pre><code><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {
    (<span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>{
        setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
            <span class="built_in">console</span>.log(e);  
        }, <span class="number">1000</span>);
    })(i);
}
</code></pre><p>将<code>setTimeout</code>包裹在一个匿名函数中，匿名函数拥有变量<code>e</code>的引用，便不用被循环改变了。   </p>
<h2 id="使用闭包的断点">使用闭包的断点</h2>
<p>在此贴上《JavaScript权威指南》中，使用<code>闭包的断点</code>代码。由<code>Steve Yen</code>所写，用来捕获一个函数中的当前作用域（包括局部变量和函数的参数），并返回其结果。</p>
<pre><code>function inspect(inspector, title) {
  <span class="keyword">var</span> expression, <span class="literal">result</span>;
  <span class="keyword">if</span>(<span class="string">"ignore"</span> <span class="keyword">in</span> arguments.callee) {
    <span class="keyword">return</span>;
  }

  <span class="keyword">while</span>(<span class="literal">true</span>) {
    <span class="keyword">var</span> message = <span class="string">""</span>;
    <span class="keyword">if</span>(title) {
      message = title + <span class="string">"\n"</span>;
    }

    <span class="keyword">if</span>(expression) {
      message += <span class="string">"\n"</span> + expression + <span class="string">" ==&gt; "</span> + <span class="literal">result</span> + <span class="string">"\n"</span>;
    } <span class="keyword">else</span> {
      expression = <span class="string">""</span>;
    }

    expression += <span class="string">"Enter an expression to evaluate:"</span>;
    expression = prompt(message, expression);

    <span class="keyword">if</span>(!expression) {
      <span class="keyword">return</span>;
    }

    <span class="literal">result</span> = inspector(expression);
  }
}
</code></pre><h2 id="用断点技术计算阶乘的函数">用断点技术计算阶乘的函数</h2>
<pre><code>function factorial(n) {
  <span class="keyword">var</span> inspector = function($) {
    <span class="keyword">return</span> eval($);
  }

  // inspect.ignore = <span class="literal">true</span>;
  inspect(inspector, <span class="string">"Entering factorial()"</span>);

  <span class="keyword">var</span> <span class="literal">result</span> = <span class="number">1</span>;
  <span class="keyword">while</span>(n &gt; <span class="number">1</span>) {
    <span class="literal">result</span> *= n;
    n--;
    inspect(inspector, <span class="string">"factorial() loop"</span>);
  }

  inspect(inspector, <span class="string">"Exiting factorial()"</span>);
  <span class="keyword">return</span> <span class="literal">result</span>;
}
</code></pre><h2 id="参考">参考</h2>
<ul>
<li><a href="http://www.amazon.cn/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E5%BC%97%E6%8B%89%E7%BA%B3%E6%A0%B9/dp/B0012UMVYA/ref=sr_1_2?ie=UTF8&amp;qid=1393770256&amp;sr=8-2&amp;keywords=javascript+%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97" target="_blank" rel="external">JavaScript权威指南</a>  </li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#function.closures" target="_blank" rel="external">Closure</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>JavaScript函数是将要执行的<strong>代码</strong>及执行这些代码的<strong>作用域</strong>构成的一个综合体。计算机术语称这种代码和作用域的综合体为<strong>闭包</strong>。故所有JavaScript函数都是闭包。但我们常]]>
    </summary>
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="closure" scheme="http://owenyang0.github.io/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实习那几月]]></title>
    <link href="http://owenyang0.github.io/2014/02/17/%E5%AE%9E%E4%B9%A0%E9%82%A3%E5%87%A0%E6%9C%88/"/>
    <id>http://owenyang0.github.io/2014/02/17/实习那几月/</id>
    <published>2014-02-17T14:00:00.000Z</published>
    <updated>2014-12-21T08:12:56.000Z</updated>
    <content type="html"><![CDATA[<h3 id="题外">题外</h3>
<p>自<strong>新蛋实习</strong>至今，也有三个多月了吧。回想起那天面试的时候，还有些许的紧张，或许是自己知道的太少，或者是自己想表达的太多。反正初出茅庐的样子，让南哥见笑了好久（我猜的）。</p>
<h3 id="题前">题前</h3>
<p>新蛋算得上是我人生去的第一家公司吧，走出了学校那座象牙塔，才明白世界是如此的广阔——以至于自己在最初时，会有自己该有的迷茫。<br>今天突然有种想写一写的冲动，也不知道是写给自己，还是写给未来的自己。权当自己人生过往的一点印记，当自己未来的一种回首！</p>
<h3 id="题中">题中</h3>
<p>没错，我就是传说中的那个<strong>程序猿</strong>，起早而贪黑，半夜却又不想眠。不太方便形容，我此时的状态，是无法形容。</p>
<p><strong>只能说：</strong> 仅仅只是自我感受罢了</p>
<blockquote>
<p><strong>这三个月看的书，差不多比得上以前的半年</strong></p>
</blockquote>
<p>不论是技术书籍，抑或是其他类的书籍，总感觉看书才是和世界沟通的最好方式之一。如果，各位有机会&gt; 看到这篇不算博文的文章的话，建议大都去看看<code>遇见未知的自己</code>一本沉淀心灵的大作，在这个浮躁的社会，能静下心来是多么的难得</p>
<blockquote>
<p><strong>接触的越多，无知便越多</strong></p>
</blockquote>
<p>接触的项目不必太多，一两个足矣。如果自己真的把自己投入进去，才会发现原来真理的环境和象牙塔里的世界，是如此的不同。<br>IT人的技术是层出不穷，想必大家都了解。技术日新月异，追求新事物的脚步不止，深入某方面研究不悉，此乃上乘之道。</p>
<p>三个多月中，用到的主要技术是 <code>AngularJs</code> <code>jQuery</code> <code>NodeJs</code>。一切都是从新开始，所以很多公司看重<strong>学习能力</strong>还是有那么一点道理。但学习的尝试，和代码的整洁度与可阅读度，就取决于自己的积累了。对于自己的问题，还是只有自己清楚。</p>
<blockquote>
<p><strong><code>AngularJS</code> 和 <code>jQuery</code> 一起使用的时候，会出现一些问题</strong></p>
</blockquote>
<p>自己纠结最终证明都是不明志的，学会查看官方的文档，学会 <code>google</code> <code>StackOverflow</code> 才是一个程序猿所必须的。<br>典型的问题，<code>AngularJs</code> 和 <code>jQuery</code> 同时更新 <code>DOM</code> 时，绝大多数都会出错：由于两边同时调用 <code>apply</code> 方法时出错—— <code>apply</code> 方法能劫持另外一个对象的方法，继承另外一个对象的属性。可以采用timeout的方式，让避免问题的出现</p>
<blockquote>
<p><strong>设计好数据结构，永远都不会错</strong></p>
</blockquote>
<p>一个项目刚刚开始时，就要设计好主要数据的结构，否则到后期的时候，你将是苦不堪言。增增补补，修修改改，最后可能自己都对自己写的东西看不下去。因为那时，项目已经不能称之为项目了，是一个典型的垃圾补丁囤积场。</p>
<blockquote>
<p><strong>写好测试代码</strong></p>
</blockquote>
<p>很多人很可能都对 <code>TDD</code> 不屑一顾，认为那纯粹的是浪费时间。诚言，有些东西是不可测试的，但必须的测试单元还是需要的。<br>多数时候，回归 <code>BUG</code> 再现的时候，自己都不会注意所写的代码。当你改代码的时候，没有一个必须的东西来保证，你所修改的部分对其他部分不会产生影响，就算你相当的自信。</p>
<p>哈哈，其实很多东西都是瞎掰，各位看客权当笑话看就行。</p>
<h3 id="再说迷茫">再说迷茫</h3>
<p>我不知道别人怎样，反正作为我自己，是有些许迷茫的感觉——不知自己会从事什么，也不知自己可以深入什么。反正就一样：对很多东西都感觉兴趣。达到了别人眼中所谓的 <code>广度</code>，殊不知自己 <code>深度</code> 方面有太多的欠缺。<br>当有一天，有人问你：</p>
<blockquote>
<p>你学过那么多的东西，到底有没有一样是你真正喜欢的东西？你有自己所深入了解过的领域吗？</p>
</blockquote>
<p>一听如此言论，可能自己都会尴尬的无地自容。</p>
<blockquote>
<ul>
<li>回过头来想想自己到底在追求什么？</li>
<li>自己明白自己真的追求什么吗？</li>
<li>自己真的对自己有一个清晰的规划吗？</li>
</ul>
</blockquote>
<p>大家都想做有广度，有深度的人。但其过程，也许只有真正的有广度、有深度的人才能体会。很多时候，作决定都是艰难的。冷静下来思考一翻，可能自己还是理不清头绪，但起码自己思考过，套用一话。</p>
<blockquote>
<p>不在乎天长地长，至少我们曾经拥有。不在乎现在是否有结果，但至少我们曾经有过思考。</p>
</blockquote>
<h3 id="题后">题后</h3>
<p>想不到自己还是写到了最后，不说自己写了些什么，至少写的过程中，有些自己的考量。或许你们是觉得此博写得是如此的可笑，或许有一天我回头看的也觉得可笑。<br>但，那又怎样呢？</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="题外">题外</h3>
<p>自<strong>新蛋实习</strong>至今，也有三个多月了吧。回想起那天面试的时候，还有些许的紧张，或许是自己知道的太少，或者是自己想表达的太多。反正初出茅庐的样子，让南哥见笑了好久（我猜的）。</p>
<h3 id="题前">]]>
    </summary>
    
      <category term="intern" scheme="http://owenyang0.github.io/tags/intern/"/>
    
      <category term="newegg" scheme="http://owenyang0.github.io/tags/newegg/"/>
    
      <category term="graduate" scheme="http://owenyang0.github.io/tags/graduate/"/>
    
  </entry>
  
</feed>
