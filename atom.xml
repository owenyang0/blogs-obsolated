<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>修远</title>
  <subtitle>其修远兮之路漫漫，吾将求索于墙外之巅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://owenyang0.github.io/"/>
  <updated>2016-01-02T17:12:56.000Z</updated>
  <id>http://owenyang0.github.io/</id>
  
  <author>
    <name>Owen Yang</name>
    <email>usay@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>赶在2015最后一班车</title>
    <link href="http://owenyang0.github.io/2016/01/03/%E8%B5%B6%E5%9C%A82015%E6%9C%80%E5%90%8E%E4%B8%80%E7%8F%AD%E8%BD%A6/"/>
    <id>http://owenyang0.github.io/2016/01/03/赶在2015最后一班车/</id>
    <published>2016-01-02T16:15:17.000Z</published>
    <updated>2016-01-02T17:12:56.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;2015人在路上，心在外边。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;u522B_u717D_u60C5_u4E86&quot;&gt;&lt;a href=&quot;#u522B_u717D_u60C5_u4E86&quot; class=&quot;headerlink&quot; title=&quot;别煽情了&quot;&gt;&lt;/a&gt;别煽情了&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一切都是安好，一段刻骨铭心却注定未果的交往，一场不闻外事说走就走的旅行，一人默默品尝苦辣酸甜的生活，以及一丝从未消逝掉的那抹期待。慢慢地，学会了一个人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;早已不是当初的那只雏鸟，却也算不得自由挥翅的雄鹰，这是毕业后完整的一年，同学之间见得少了，朋友之间的联系也不是那么多了，每个人都生活在新的圈子里，或是独自承受，或是开始担当。不是忘了，兴许是累了，应该不会有人去忘却曾经的岁月青葱，如果有那么天，定会想起当初的约定，初心么？&lt;/p&gt;
&lt;p&gt;学不会怎么去煽情，也不懂如何去述事，每每有一点东西，欲从内心深处蹦出，却又在键盘上的指间错过。&lt;/p&gt;
&lt;p&gt;时间下午，还有夕阳。地点武汉，开往机场。人物出租车师傅以及自己，漫天黄沙与雾霾。就在沙与霾的包裹中，从夕阳时走到晚上，视野早已不清楚，不是因为没有灯，是因为灯光下的世界是那么的模糊。&lt;br&gt;&lt;img src=&quot;/images/airport.jpg&quot; alt=&quot;airport&quot; title=&quot;airport&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;u8981_u5B9E_u5728_u70B9&quot;&gt;&lt;a href=&quot;#u8981_u5B9E_u5728_u70B9&quot; class=&quot;headerlink&quot; title=&quot;要实在点&quot;&gt;&lt;/a&gt;要实在点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;读书&lt;/strong&gt; 是个严肃活儿，有计划，有目标，有方向才能更好地读懂生活。去年，或许只有读书计划完成了，貌似是因为也没其他的计划。翻了一下去年的总结，计划不多，一年30本书，足矣。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相比于2014，也是有了长足的进步。20本 –&amp;gt; 33本。&lt;/li&gt;
&lt;li&gt;明年，2016，成长着，&lt;em&gt;&lt;em&gt;50本&lt;/em&gt;&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;文字&lt;/strong&gt; 很神奇，放得越久越能感受其伟大。回看2014的总结，才知当时自己是种怎样的心境。记录生活，记录自己，不是把自己复制，只求某一天回首时，能发现自己也走过如些不一般的道路。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;旅行&lt;/strong&gt; 不是放纵，也许是放松，但对某些人更可能是灵魂的洗涤净化。日本有去，古都文化，走着走着，你会顿悟吗？下一站，你说呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;英语&lt;/strong&gt; 这东西怎么说呢，日常似乎也能应付，但缺乏系统地掌握。身处这样一个环境之中，是多么好的机会，明年要不拿个雅思玩？要求别太高，&lt;em&gt;6分&lt;/em&gt; 吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;电影&lt;/strong&gt; 不只是那么120分钟的剧情，也不是影院里的各种特效，在乎的是什么呢。今年看书算是比较多了，电影感觉也没落下，慢慢地发现电影中有太多自己没有思考过的事情，和书一样传递出思考。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;驾照&lt;/strong&gt;，哟就一本儿，找个机会拿下它吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u7559_u70B9_u4E1C_u897F&quot;&gt;&lt;a href=&quot;#u7559_u70B9_u4E1C_u897F&quot; class=&quot;headerlink&quot; title=&quot;留点东西&quot;&gt;&lt;/a&gt;留点东西&lt;/h3&gt;&lt;p&gt;去年送给自己的一句话：心态，别抑郁，要乐观，诚对人，能坚持，追梦想。除了“别抑郁”，自己都做得挺好。&lt;br&gt;再送自己一句话，给2016:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你就是你，不要在乎别人的比拟，自己觉得自己活得精彩那便是精彩。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2015人在路上，心在外边。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;u522B_u717D_u60C5_u4E86&quot;&gt;&lt;a href=&quot;#u522B_u717D_u60C5_u4E86&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="2015" scheme="http://owenyang0.github.io/tags/2015/"/>
    
      <category term="2016" scheme="http://owenyang0.github.io/tags/2016/"/>
    
      <category term="plan" scheme="http://owenyang0.github.io/tags/plan/"/>
    
      <category term="summary" scheme="http://owenyang0.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>Overview of ES6</title>
    <link href="http://owenyang0.github.io/2015/05/31/Overview-of-ES6/"/>
    <id>http://owenyang0.github.io/2015/05/31/Overview-of-ES6/</id>
    <published>2015-05-31T09:03:25.000Z</published>
    <updated>2015-06-03T05:40:22.000Z</updated>
    
    <content type="html">&lt;p&gt;Slides in ES6 overview workshop&lt;/p&gt;
&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;h3 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h3&gt;&lt;p&gt;ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准&lt;/p&gt;
&lt;h3 id=&quot;Goal&quot;&gt;&lt;a href=&quot;#Goal&quot; class=&quot;headerlink&quot; title=&quot;Goal&quot;&gt;&lt;/a&gt;Goal&lt;/h3&gt;&lt;p&gt;ES6的目标，是使得JavaScript语言可以用来编写大型的复杂的应用程序，成为企业级开发语言。&lt;br&gt;新的语言特性，代码更优雅，程序更健壮，减少不必要的重复，减少不必要的第三方依赖。&lt;/p&gt;
&lt;h2 id=&quot;Agenda&quot;&gt;&lt;a href=&quot;#Agenda&quot; class=&quot;headerlink&quot; title=&quot;Agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;template strings&lt;/li&gt;
&lt;li&gt;const&lt;/li&gt;
&lt;li&gt;let&lt;/li&gt;
&lt;li&gt;block-level declaration&lt;/li&gt;
&lt;li&gt;Destructuring Assignment&lt;/li&gt;
&lt;li&gt;arrow functions&lt;/li&gt;
&lt;li&gt;default function params&lt;/li&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;module&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Requirements&quot;&gt;&lt;a href=&quot;#Requirements&quot; class=&quot;headerlink&quot; title=&quot;Requirements&quot;&gt;&lt;/a&gt;Requirements&lt;/h2&gt;&lt;p&gt;Babel &lt;a href=&quot;https://babeljs.io/docs/usage/cli/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://babeljs.io/docs/usage/cli/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --global babel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Talk_is_cheap_2C_show_me_the_code&quot;&gt;&lt;a href=&quot;#Talk_is_cheap_2C_show_me_the_code&quot; class=&quot;headerlink&quot; title=&quot;Talk is cheap, show me the code.&quot;&gt;&lt;/a&gt;Talk is cheap, show me the code.&lt;/h2&gt;&lt;h2 id=&quot;template_strings&quot;&gt;&lt;a href=&quot;#template_strings&quot; class=&quot;headerlink&quot; title=&quot;template strings&quot;&gt;&lt;/a&gt;template strings&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; first = &lt;span class=&quot;string&quot;&gt;&quot;Song&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; last = &lt;span class=&quot;string&quot;&gt;&quot;Yang&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;`I&#39;m &lt;span class=&quot;subst&quot;&gt;$&amp;#123;first&amp;#125;&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;$&amp;#123;last&amp;#125;&lt;/span&gt;!`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;性能对比&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://heeroluo.net/article/detail/54&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://heeroluo.net/article/detail/54&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。&lt;/p&gt;
&lt;h2 id=&quot;const&quot;&gt;&lt;a href=&quot;#const&quot; class=&quot;headerlink&quot; title=&quot;const&quot;&gt;&lt;/a&gt;const&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; PI = &lt;span class=&quot;number&quot;&gt;3.14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; global === &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt; ? global : &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;PI&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value:        &lt;span class=&quot;number&quot;&gt;3.14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enumerable:   &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    writable:     &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    configurable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h2&gt;&lt;p&gt;声明变量，变量只在let命令所在代码块内有效。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b &lt;span class=&quot;comment&quot;&gt;// ReferenceError: b is not defined.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;let不允许在相同作用域内，重复声明同一个变量。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;block-level_declaration&quot;&gt;&lt;a href=&quot;#block-level_declaration&quot; class=&quot;headerlink&quot; title=&quot;block-level declaration&quot;&gt;&lt;/a&gt;block-level declaration&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;let, const 块级作用域&lt;/li&gt;
&lt;li&gt;var 函数作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,len=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;i&amp;lt;len;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//body&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i,len);=&amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES5的JavaScript的不支持块级作用域，变量仅仅被限制到函数作用域内。&lt;/p&gt;
&lt;h3 id=&quot;Pros&quot;&gt;&lt;a href=&quot;#Pros&quot; class=&quot;headerlink&quot; title=&quot;Pros&quot;&gt;&lt;/a&gt;Pros&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// IIFE写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmp = ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 块级作用域写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tmp = ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;function_scope&quot;&gt;&lt;a href=&quot;#function_scope&quot; class=&quot;headerlink&quot; title=&quot;function scope&quot;&gt;&lt;/a&gt;function scope&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;I am outside!&#39;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// What should happen with this redeclaration?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;I am inside!&#39;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  f();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Destructuring_Assignment&quot;&gt;&lt;a href=&quot;#Destructuring_Assignment&quot; class=&quot;headerlink&quot; title=&quot;Destructuring Assignment&quot;&gt;&lt;/a&gt;Destructuring Assignment&lt;/h2&gt;&lt;p&gt;ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。&lt;/p&gt;
&lt;h3 id=&quot;Array_destructuring&quot;&gt;&lt;a href=&quot;#Array_destructuring&quot; class=&quot;headerlink&quot; title=&quot;Array destructuring&quot;&gt;&lt;/a&gt;Array destructuring&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [a, b, c] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[a, b] = [b, a];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u6A21_u5F0F_u5339_u914D_uFF08_u5D4C_u5957_u6570_u7EC4_uFF09&quot;&gt;&lt;a href=&quot;#u6A21_u5F0F_u5339_u914D_uFF08_u5D4C_u5957_u6570_u7EC4_uFF09&quot; class=&quot;headerlink&quot; title=&quot;模式匹配（嵌套数组）&quot;&gt;&lt;/a&gt;模式匹配（嵌套数组）&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [foo, [[bar], baz]] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [,,third] = [&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;third &lt;span class=&quot;comment&quot;&gt;// &quot;baz&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [head, ...tail] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;head &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tail &lt;span class=&quot;comment&quot;&gt;// [2, 3, 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u89E3_u6784_u5931_u8D25&quot;&gt;&lt;a href=&quot;#u89E3_u6784_u5931_u8D25&quot; class=&quot;headerlink&quot; title=&quot;解构失败&quot;&gt;&lt;/a&gt;解构失败&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [foo] = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [foo] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [foo] = &lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [foo] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [foo] = &lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [bar, foo] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果对undefined或null进行解构，会报错。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [foo] = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [foo] = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解构赋值允许指定默认值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[x, y=&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;] = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// x=3, y=&#39;b&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解构赋值不仅适用于var命令，也适用于let和const命令。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [v1, v2, ..., vN ] = array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [v1, v2, ..., vN ] = array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [v1, v2, ..., vN ] = array;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Object_destructuring&quot;&gt;&lt;a href=&quot;#Object_destructuring&quot; class=&quot;headerlink&quot; title=&quot;Object destructuring&quot;&gt;&lt;/a&gt;Object destructuring&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123; foo, bar &amp;#125; = &amp;#123; foo: &lt;span class=&quot;string&quot;&gt;&quot;aaa&quot;&lt;/span&gt;, bar: &lt;span class=&quot;string&quot;&gt;&quot;bbb&quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo &lt;span class=&quot;comment&quot;&gt;// &quot;aaa&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar &lt;span class=&quot;comment&quot;&gt;// &quot;bbb&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果变量名与属性名不一致，必须写成下面这样。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123; foo: baz &amp;#125; = &amp;#123; foo: &lt;span class=&quot;string&quot;&gt;&quot;aaa&quot;&lt;/span&gt;, bar: &lt;span class=&quot;string&quot;&gt;&quot;bbb&quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz &lt;span class=&quot;comment&quot;&gt;// &quot;aaa&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; y: &lt;span class=&quot;string&quot;&gt;&quot;World&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123; p: [x, &amp;#123; y &amp;#125;] &amp;#125; = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x &lt;span class=&quot;comment&quot;&gt;// &quot;Hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y &lt;span class=&quot;comment&quot;&gt;// &quot;World&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;对象的解构也可以指定默认值。&lt;/li&gt;
&lt;li&gt;如果要将一个已经声明的变量用于解构赋值&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 错误的写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;x&amp;#125; = &amp;#123;x:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// SyntaxError: syntax error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&amp;#123;x&amp;#125; = &amp;#123;x:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript引擎会将{x}理解成一个代码块，从而发生语法错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; 数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。&lt;/p&gt;
&lt;h3 id=&quot;Pros-1&quot;&gt;&lt;a href=&quot;#Pros-1&quot; class=&quot;headerlink&quot; title=&quot;Pros&quot;&gt;&lt;/a&gt;Pros&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;交换变量的值&lt;/li&gt;
&lt;li&gt;从函数返回多个值&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历Map结构&lt;br&gt;配合变量的解构赋值，获取键名和键值&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [key, value] &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; map) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(key + &lt;span class=&quot;string&quot;&gt;&quot; is &quot;&lt;/span&gt; + value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入模块的指定方法&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; SourceMapConsumer, SourceNode &amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;source-map&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Arrow_Function&quot;&gt;&lt;a href=&quot;#Arrow_Function&quot; class=&quot;headerlink&quot; title=&quot;Arrow Function&quot;&gt;&lt;/a&gt;Arrow Function&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法糖：function的简写，或者是使用胖箭头 () =&amp;gt; 的Lamda表达式。&lt;/li&gt;
&lt;li&gt;不仅仅是语法糖：自动绑定外部作用域的”this”.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; items = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; double = (x) =&amp;gt; x * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; byTwo = items.map(double);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; [2, 4, 6, 8]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foot = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kickNormal: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.yelp = &lt;span class=&quot;string&quot;&gt;&quot;Ouch!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      setImmediate(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.yelp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kick: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.yelp = &lt;span class=&quot;string&quot;&gt;&quot;Ouch!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setImmediate(() =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.yelp));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;default_function_params&quot;&gt;&lt;a href=&quot;#default_function_params&quot; class=&quot;headerlink&quot; title=&quot;default function params&quot;&gt;&lt;/a&gt;default function params&lt;/h2&gt;&lt;p&gt;在ES6默认值特性出现前，手动处理默认值有几种方式：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message, level&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  level = level || &lt;span class=&quot;string&quot;&gt;&#39;warning&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(level, &lt;span class=&quot;string&quot;&gt;&#39;: &#39;&lt;/span&gt;, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;low memory&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// warning: low memory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;out of memory&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// error: out of memory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了处理参数未传递的情况，我们常看到typeof检测:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; level == &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  level = &lt;span class=&quot;string&quot;&gt;&#39;warning&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有时也可以检查arguments.length&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  level = &lt;span class=&quot;string&quot;&gt;&#39;warning&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些方法都可以很好的工作，但都过于手动且缺少抽象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message, level = &#39;warning&#39;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(level, &lt;span class=&quot;string&quot;&gt;&#39;: &#39;&lt;/span&gt;, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;low memory&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// warning: low memory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;out of memory&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// error: out of memory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数默认值使用方便且毫无违和感。&lt;/p&gt;
&lt;h2 id=&quot;Classes&quot;&gt;&lt;a href=&quot;#Classes&quot; class=&quot;headerlink&quot; title=&quot;Classes&quot;&gt;&lt;/a&gt;Classes&lt;/h2&gt;&lt;p&gt;A formal inheritance syntax comes to JavaScript&lt;br&gt;Really just syntactical sugar over JS prototypical inheritance&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greeter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  static create(msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  greet() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.msg&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  set message(msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  get message() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _createClass = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;defineProperties&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;target, props&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; props.length; i++) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; descriptor.configurable = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; descriptor) descriptor.writable = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(target, descriptor.key, descriptor); &amp;#125; &amp;#125; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;Constructor, protoProps, staticProps&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (protoProps) defineProperties(Constructor.prototype, protoProps); &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (staticProps) defineProperties(Constructor, staticProps); &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Constructor; &amp;#125;; &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_classCallCheck&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;instance, Constructor&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(instance &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Constructor)) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Cannot call a class as a function&#39;&lt;/span&gt;); &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Greeter = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greeter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;msg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _classCallCheck(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, Greeter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Greeter.create = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;msg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Greeter.prototype.greet = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _createClass(Greeter, [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    key: &lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;msg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    get: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Greeter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Extends&quot;&gt;&lt;a href=&quot;#Extends&quot; class=&quot;headerlink&quot; title=&quot;Extends&quot;&gt;&lt;/a&gt;Extends&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyGreeter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greeter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(msg, name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  greet () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.name&amp;#125;&lt;/span&gt;, Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.msg&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fg = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FancyGreeter(&lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Song&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(fg &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; FancyGreeter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(fg &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Greeter);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;Module&lt;/h2&gt;&lt;h3 id=&quot;export_u548Cimport&quot;&gt;&lt;a href=&quot;#export_u548Cimport&quot; class=&quot;headerlink&quot; title=&quot;export和import&quot;&gt;&lt;/a&gt;export和import&lt;/h3&gt;&lt;p&gt;ES6实现了模块功能，试图解决JavaScript代码的依赖和部署上的问题，取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; first = &lt;span class=&quot;string&quot;&gt;&#39;David&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; last = &lt;span class=&quot;string&quot;&gt;&#39;Belle&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; year = &lt;span class=&quot;number&quot;&gt;1973&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &amp;#123;first, last, year&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;first, last, year&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./profile&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;first &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f, last&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./profile&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; profile &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./profile&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;NOT_Included&quot;&gt;&lt;a href=&quot;#NOT_Included&quot; class=&quot;headerlink&quot; title=&quot;NOT Included&quot;&gt;&lt;/a&gt;NOT Included&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Map, WeakMap, Set, WeakSet&lt;/li&gt;
&lt;li&gt;Promise&lt;/li&gt;
&lt;li&gt;Generator&lt;/li&gt;
&lt;li&gt;Iterator&lt;/li&gt;
&lt;li&gt;Rest Parameter&lt;/li&gt;
&lt;li&gt;Spread Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u65B0_u7684_u5185_u5EFA_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u65B0_u7684_u5185_u5EFA_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;新的内建方法&quot;&gt;&lt;/a&gt;新的内建方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Object.assign&lt;/li&gt;
&lt;li&gt;[arr].find&lt;/li&gt;
&lt;li&gt;“str”.repeat&lt;/li&gt;
&lt;li&gt;“str”.startsWith&lt;/li&gt;
&lt;li&gt;“str”.endsWith&lt;/li&gt;
&lt;li&gt;“str”.includes&lt;/li&gt;
&lt;li&gt;Number.isNaN&lt;/li&gt;
&lt;li&gt;Number.isFinite&lt;/li&gt;
&lt;li&gt;Number.isSafeInteger&lt;/li&gt;
&lt;li&gt;Math.trunc&lt;/li&gt;
&lt;li&gt;Math.sign&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Using_ES6_Today&quot;&gt;&lt;a href=&quot;#Using_ES6_Today&quot; class=&quot;headerlink&quot; title=&quot;Using ES6 Today&quot;&gt;&lt;/a&gt;Using ES6 Today&lt;/h2&gt;&lt;h3 id=&quot;Server&quot;&gt;&lt;a href=&quot;#Server&quot; class=&quot;headerlink&quot; title=&quot;Server&quot;&gt;&lt;/a&gt;Server&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;io 2.2.0&lt;/li&gt;
&lt;li&gt;node 0.12.4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Browser&quot;&gt;&lt;a href=&quot;#Browser&quot; class=&quot;headerlink&quot; title=&quot;Browser&quot;&gt;&lt;/a&gt;Browser&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Browserify&lt;/li&gt;
&lt;li&gt;Babel&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Resources&quot;&gt;&lt;a href=&quot;#Resources&quot; class=&quot;headerlink&quot; title=&quot;Resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://es6-features.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6 — New Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Slides in ES6 overview workshop&lt;/p&gt;
&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;h3 id=&quot;What&quot;&gt;&lt;a href=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>两分钟了解ReactiveX</title>
    <link href="http://owenyang0.github.io/2015/05/08/2-minute-introduction-to-Rx/"/>
    <id>http://owenyang0.github.io/2015/05/08/2-minute-introduction-to-Rx/</id>
    <published>2015-05-08T03:59:09.000Z</published>
    <updated>2015-05-08T06:24:37.000Z</updated>
    
    <content type="html">&lt;p&gt;可能在之前，你就已经看过这篇&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;响应式编程的入门&lt;/a&gt;。什么？太长？好吧，这都没关系，&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rx&lt;/a&gt;并不难，你甚至可以自己实现一个这样的框架。&lt;br&gt;知道数组吧？你当然知道，这就是：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ 14, 9, 5, 2, 10, 13, 4 ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果说这是一个&lt;strong&gt;非可变数组&lt;/strong&gt;，但需要移除所有的奇数，你会怎样做呢？可能会是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter( (x) -&amp;gt; x % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; [ 14, 2, 10, 4 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直到现在也没什么新鲜东西，这在&lt;code&gt;underscore.js&lt;/code&gt;, &lt;code&gt;ECMAScript 5.1&lt;/code&gt;, &lt;code&gt;LINQ&lt;/code&gt;, &lt;code&gt;Guava&lt;/code&gt;, 等等之中，早已司空见惯。这些都是来自于函数式的编程范型。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;再来想想带来坐标位置数据的点击事件。如果画一条时间线，它们看起来应该是这样。&lt;br&gt;&lt;img src=&quot;/images/click-events.png&quot; alt=&quot;click events line&quot;&gt;&lt;/p&gt;
&lt;p&gt;是的，这是一个事件流，它有一妮称，叫 “Observable”。&lt;/p&gt;
&lt;p&gt;这些点击事件，都来自于鼠标，意味着整个事件流都是&lt;strong&gt;不可变的&lt;/strong&gt;。事件被触发后，我们没有办法对事件进行添加或删除。&lt;br&gt;但我如果只是关心&lt;code&gt;x &amp;lt; 250&lt;/code&gt;的事件呢？能不能创建一个像数组一样的新的流，再对其进行过滤呢？&lt;br&gt;&lt;img src=&quot;/images/click-events.png&quot; alt=&quot;click events line&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;filter( (event) -&amp;gt; event.x &amp;lt; &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/click-events-filtered.png&quot; alt=&quot;click events filted line&quot;&gt;&lt;/p&gt;
&lt;p&gt;非可变数组和Observables有什么区别呢？其实不多，两个都可以使用&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;等高阶函数。在Observables中，你也可以使用&lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;delay&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt;, &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;distinct&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;startWith&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;takeUntil&lt;/code&gt;, &lt;code&gt;skip&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt;, &lt;code&gt;sample&lt;/code&gt;, &lt;code&gt;amb&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;等函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想像一下异步的非可变数组&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Rx&lt;/code&gt;可以说是操作事件的&lt;code&gt;underscore.js&lt;/code&gt;。但，等一下，什么是事件？在你的程序中，难道不是绝大多数代码都是事件吗？&lt;br&gt;程序启动事件，API响应事件，键盘事件，设备休眠事件等等。&lt;/p&gt;
&lt;p&gt;基本上，所有东西都可以是事件流。所需要的只是要适当地进行排列组合。&lt;/p&gt;
&lt;p&gt;这就是&lt;code&gt;Rx&lt;/code&gt;的两分钟。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;可能在之前，你就已经看过这篇&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;响应式编程的入门&lt;/a&gt;。什么？太长？好吧，这都没关系，&lt;a
    
    </summary>
    
    
      <category term="Reactive Programming" scheme="http://owenyang0.github.io/tags/Reactive-Programming/"/>
    
      <category term="Rx" scheme="http://owenyang0.github.io/tags/Rx/"/>
    
      <category term="RxJS" scheme="http://owenyang0.github.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming in JavaScript</title>
    <link href="http://owenyang0.github.io/2015/04/12/functional-programming-in-javascript/"/>
    <id>http://owenyang0.github.io/2015/04/12/functional-programming-in-javascript/</id>
    <published>2015-04-11T16:09:44.000Z</published>
    <updated>2015-04-19T09:59:38.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Agenda&quot;&gt;&lt;a href=&quot;#Agenda&quot; class=&quot;headerlink&quot; title=&quot;Agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;What is Functional Programming?&lt;/li&gt;
&lt;li&gt;How Functional Programming Differs From Other Paradigms&lt;/li&gt;
&lt;li&gt;Functional Programming in Javascript&lt;/li&gt;
&lt;li&gt;Advantages and Disadvantages of Functional Style&lt;/li&gt;
&lt;li&gt;Interaction of Functional and Object-Oriented Styles&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;What_is_Functional_Programming_3F&quot;&gt;&lt;a href=&quot;#What_is_Functional_Programming_3F&quot; class=&quot;headerlink&quot; title=&quot;What is Functional Programming?&quot;&gt;&lt;/a&gt;What is Functional Programming?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Restricted sense,&lt;/strong&gt; FP means programming without mutable variables, assignments, loops and other imperative control structures&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wider sense,&lt;/strong&gt; FP means focusing on the functions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Particularly,&lt;/strong&gt; functions can be values that are produced, consumed, and composed.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Functional_Programming_Languages&quot;&gt;&lt;a href=&quot;#Functional_Programming_Languages&quot; class=&quot;headerlink&quot; title=&quot;Functional Programming Languages&quot;&gt;&lt;/a&gt;Functional Programming Languages&lt;/h2&gt;&lt;p&gt;Functions in a FP languages are first-class citizens. This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they can be defined anywhere, including inside other function&lt;/li&gt;
&lt;li&gt;like any other values, they can be passed as parameters to functions and returned as results&lt;/li&gt;
&lt;li&gt;as for other values, there exist a set of operators to compose functions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Some_languages&quot;&gt;&lt;a href=&quot;#Some_languages&quot; class=&quot;headerlink&quot; title=&quot;Some languages&quot;&gt;&lt;/a&gt;Some languages&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Restricted sense:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pure Lisp, XSLT, XPath, XQuery, FP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Wider sense:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Lisp, Scheme, Racket, Clojure&lt;/li&gt;
&lt;li&gt;SML, F#&lt;/li&gt;
&lt;li&gt;Haskell (full language)&lt;/li&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;OOP_vs_FP&quot;&gt;&lt;a href=&quot;#OOP_vs_FP&quot; class=&quot;headerlink&quot; title=&quot;OOP vs FP&quot;&gt;&lt;/a&gt;OOP vs FP&lt;/h2&gt;&lt;p&gt;OO focuses on the differences in the data, while FP concentrates on consistent data structures.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Object-Oriented&quot;&gt;&lt;a href=&quot;#Object-Oriented&quot; class=&quot;headerlink&quot; title=&quot;Object-Oriented&quot;&gt;&lt;/a&gt;Object-Oriented&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data and the operations upon it are tightly coupled&lt;/li&gt;
&lt;li&gt;Objects hide their implementation of operations from other objects via their interfaces&lt;/li&gt;
&lt;li&gt;The central model for abstraction is the data itself&lt;/li&gt;
&lt;li&gt;The central activity is composing new objects and extending existing objects by adding new methods to them&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Functional&quot;&gt;&lt;a href=&quot;#Functional&quot; class=&quot;headerlink&quot; title=&quot;Functional&quot;&gt;&lt;/a&gt;Functional&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data is only loosely coupled to functions&lt;/li&gt;
&lt;li&gt;Functions hide their implementation, and the language’s abstractions speak to functions and the way they are combined or expressed&lt;/li&gt;
&lt;li&gt;The central model for abstraction is the function, not the data structure.&lt;br&gt;The central activity is writing new functions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Declarative_vs_Imperative&quot;&gt;&lt;a href=&quot;#Declarative_vs_Imperative&quot; class=&quot;headerlink&quot; title=&quot;Declarative vs Imperative&quot;&gt;&lt;/a&gt;Declarative vs Imperative&lt;/h2&gt;&lt;p&gt;One main distinguishing characteristics of functional programming languages is that they describe what they want done, and not how to do it. OO, inside its methods, still uses mostly imperative techniques.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Imperative_programming_is_about&quot;&gt;&lt;a href=&quot;#Imperative_programming_is_about&quot; class=&quot;headerlink&quot; title=&quot;Imperative programming is about&quot;&gt;&lt;/a&gt;Imperative programming is about&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;modifying mutable variables&lt;/li&gt;
&lt;li&gt;using assignment&lt;/li&gt;
&lt;li&gt;and control structures such as if-then-else, loops, break, continue, return.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The most common informal way to understand imperative programs is as instruction sequences for a Von Neumann computer&lt;/p&gt;
&lt;p&gt;Processor &amp;lt;—- bus —-&amp;gt; Memory&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Declarative_programming_is_about&quot;&gt;&lt;a href=&quot;#Declarative_programming_is_about&quot; class=&quot;headerlink&quot; title=&quot;Declarative programming is about&quot;&gt;&lt;/a&gt;Declarative programming is about&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;concentrate on functions&lt;/li&gt;
&lt;li&gt;avoid mutations (mutation can bestroy useful laws)&lt;/li&gt;
&lt;li&gt;have powerful ways to abstract and compose functions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Imperative_style&quot;&gt;&lt;a href=&quot;#Imperative_style&quot; class=&quot;headerlink&quot; title=&quot;Imperative style&quot;&gt;&lt;/a&gt;Imperative style&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var sumOfSquares = function(list) &amp;#123;&amp;#10;    var result = 0;&amp;#10;    for (var i = 0; i &amp;#60; list.length; i++) &amp;#123;&amp;#10;        result += square(list[i]);&amp;#10;    &amp;#125;&amp;#10;    return result;&amp;#10;&amp;#125;;&amp;#10;&amp;#10;console.log(sumOfSquares([2, 3, 5]));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Functional_style&quot;&gt;&lt;a href=&quot;#Functional_style&quot; class=&quot;headerlink&quot; title=&quot;Functional style&quot;&gt;&lt;/a&gt;Functional style&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sumOfSquares = pipe(map(square), reduce(add, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sumOfSquares([&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Functional_Features_in_JavaScript&quot;&gt;&lt;a href=&quot;#Functional_Features_in_JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Functional Features in JavaScript&quot;&gt;&lt;/a&gt;Functional Features in JavaScript&lt;/h2&gt;&lt;h3 id=&quot;Easily_available_in_Javascript&quot;&gt;&lt;a href=&quot;#Easily_available_in_Javascript&quot; class=&quot;headerlink&quot; title=&quot;Easily available in Javascript&quot;&gt;&lt;/a&gt;Easily available in Javascript&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;First-class functions&lt;/li&gt;
&lt;li&gt;Lambdas/Anonymous Functions with closures&lt;/li&gt;
&lt;li&gt;Compact, even terse, functions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Possible_to_accomplish_in_JavaScript&quot;&gt;&lt;a href=&quot;#Possible_to_accomplish_in_JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Possible to accomplish in JavaScript&quot;&gt;&lt;/a&gt;Possible to accomplish in JavaScript&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Mostly stateless processing&lt;/li&gt;
&lt;li&gt;Side-effect-free functions calls&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Not_available_in_JavaScript&quot;&gt;&lt;a href=&quot;#Not_available_in_JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Not available in JavaScript&quot;&gt;&lt;/a&gt;Not available in JavaScript&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Performant recursion through tail call optimization&lt;/li&gt;
&lt;li&gt;Pattern matching (Haskell, Erlang)&lt;/li&gt;
&lt;li&gt;Lazy Evaluation (Miranda, Haskell)&lt;/li&gt;
&lt;li&gt;Homoiconicity (mostly LISP-like languages?)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Shared_examples&quot;&gt;&lt;a href=&quot;#Shared_examples&quot; class=&quot;headerlink&quot; title=&quot;Shared examples&quot;&gt;&lt;/a&gt;Shared examples&lt;/h3&gt;&lt;p&gt;This calculates the odds of choosing the correct &lt;code&gt;n&lt;/code&gt; numbers out of the &lt;code&gt;p&lt;/code&gt; possibilities.&lt;/p&gt;
&lt;h3 id=&quot;iterative_version&quot;&gt;&lt;a href=&quot;#iterative_version&quot; class=&quot;headerlink&quot; title=&quot;iterative version&quot;&gt;&lt;/a&gt;iterative version&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;odds&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n, p&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; acc = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        acc *= (n - i) / (p - i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; acc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(odds(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//=&amp;gt; (3/10) * (2/9) * (1/8) =&amp;gt; (1/120) =&amp;gt; 0.008333...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Recursive_version&quot;&gt;&lt;a href=&quot;#Recursive_version&quot; class=&quot;headerlink&quot; title=&quot;Recursive version&quot;&gt;&lt;/a&gt;Recursive version&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Recursive version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;odds&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n, p&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) ? &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : (n / p) * odds(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, p - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(odds(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//=&amp;gt; (3/10) * (2/9) * (1/8) =&amp;gt; (1/120) =&amp;gt; 0.008333...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;recursive functions are often much more elegant than their iterative cousins.&lt;/li&gt;
&lt;li&gt;Unfortunately, they often don’t perform as well. All the overhead of creating stack contexts for function calls tends to add up. But certain kinds of recursive calls can be easily optimized.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;tail_recursive&quot;&gt;&lt;a href=&quot;#tail_recursive&quot; class=&quot;headerlink&quot; title=&quot;tail recursive&quot;&gt;&lt;/a&gt;tail recursive&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var odds = (function()&amp;#123;&amp;#10;    var odds1 = function(n, p, acc) &amp;#123;&amp;#10;        return (n == 0) ? acc : odds1(n - 1, p - 1, (n / p) * acc);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    return function(n, p) &amp;#123;&amp;#10;        return odds1(n, p, 1)&amp;#10;    &amp;#125;&amp;#10;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note that the recursive call in &lt;strong&gt;odds1&lt;/strong&gt; is the last statement in its branch of the function. If this is true for all recursive calls, then the function is &lt;strong&gt;tail-recursive&lt;/strong&gt;, and the compiler can replace the entire set of nested calls with simple &lt;strong&gt;JUMP&lt;/strong&gt; operations.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Functional_Programming_in_Javascript&quot;&gt;&lt;a href=&quot;#Functional_Programming_in_Javascript&quot; class=&quot;headerlink&quot; title=&quot;Functional Programming in Javascript&quot;&gt;&lt;/a&gt;Functional Programming in Javascript&lt;/h2&gt;&lt;p&gt;With first-class function, closures, and anonymous functions, Javascript allows us to do a great deal of functional programming, even if we don’t have things like pattern matching and homoiconicity.&lt;/p&gt;
&lt;p&gt;There are some tools built in to modern Javascript environments, and it’s straightforward to roll your own.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ramda&lt;/li&gt;
&lt;li&gt;Underscore, Lo-Dash&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Using_Functional_Techniques_in_JavaScript&quot;&gt;&lt;a href=&quot;#Using_Functional_Techniques_in_JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Using Functional Techniques in JavaScript&quot;&gt;&lt;/a&gt;Using Functional Techniques in JavaScript&lt;/h2&gt;&lt;p&gt;Example will be a Task List application, fetching something like the following data from the server:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result: &lt;span class=&quot;string&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    interfaceVersion: &lt;span class=&quot;string&quot;&gt;&quot;1.0.3&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requested: &lt;span class=&quot;string&quot;&gt;&quot;10/17/2013 15:31:20&quot;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lastUpdated: &lt;span class=&quot;string&quot;&gt;&quot;10/16/2013 10:52:39&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tasks: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;number&quot;&gt;104&lt;/span&gt;, complete: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,            priority: &lt;span class=&quot;string&quot;&gt;&quot;high&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  dueDate: &lt;span class=&quot;string&quot;&gt;&quot;11/29/2013&quot;&lt;/span&gt;,      member: &lt;span class=&quot;string&quot;&gt;&quot;Scott&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  title: &lt;span class=&quot;string&quot;&gt;&quot;Do something&quot;&lt;/span&gt;,      created: &lt;span class=&quot;string&quot;&gt;&quot;9/22/2013&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;, complete: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,            priority: &lt;span class=&quot;string&quot;&gt;&quot;medium&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  dueDate: &lt;span class=&quot;string&quot;&gt;&quot;11/22/2013&quot;&lt;/span&gt;,      member: &lt;span class=&quot;string&quot;&gt;&quot;Lena&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  title: &lt;span class=&quot;string&quot;&gt;&quot;Do something else&quot;&lt;/span&gt;, created: &lt;span class=&quot;string&quot;&gt;&quot;9/22/2013&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;number&quot;&gt;107&lt;/span&gt;, complete: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,             priority: &lt;span class=&quot;string&quot;&gt;&quot;high&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  dueDate: &lt;span class=&quot;string&quot;&gt;&quot;11/22/2013&quot;&lt;/span&gt;,      member: &lt;span class=&quot;string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  title: &lt;span class=&quot;string&quot;&gt;&quot;Fix the foo&quot;&lt;/span&gt;,       created: &lt;span class=&quot;string&quot;&gt;&quot;9/22/2013&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;number&quot;&gt;108&lt;/span&gt;, complete: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,            priority: &lt;span class=&quot;string&quot;&gt;&quot;low&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  dueDate: &lt;span class=&quot;string&quot;&gt;&quot;11/15/2013&quot;&lt;/span&gt;,      member: &lt;span class=&quot;string&quot;&gt;&quot;Punam&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  title: &lt;span class=&quot;string&quot;&gt;&quot;Adjust the bar&quot;&lt;/span&gt;,    created: &lt;span class=&quot;string&quot;&gt;&quot;9/25/2013&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;, complete: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,            priority: &lt;span class=&quot;string&quot;&gt;&quot;medium&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  dueDate: &lt;span class=&quot;string&quot;&gt;&quot;11/15/2013&quot;&lt;/span&gt;,      member: &lt;span class=&quot;string&quot;&gt;&quot;Scott&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  title: &lt;span class=&quot;string&quot;&gt;&quot;Rename everything&quot;&lt;/span&gt;, created: &lt;span class=&quot;string&quot;&gt;&quot;10/2/2013&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;number&quot;&gt;112&lt;/span&gt;, complete: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,             priority: &lt;span class=&quot;string&quot;&gt;&quot;high&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  dueDate: &lt;span class=&quot;string&quot;&gt;&quot;11/27/2013&quot;&lt;/span&gt;,      member: &lt;span class=&quot;string&quot;&gt;&quot;Lena&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  title: &lt;span class=&quot;string&quot;&gt;&quot;Alter all quuxes&quot;&lt;/span&gt;,  created: &lt;span class=&quot;string&quot;&gt;&quot;10/5/2013&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// , ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Goal&quot;&gt;&lt;a href=&quot;#Goal&quot; class=&quot;headerlink&quot; title=&quot;Goal&quot;&gt;&lt;/a&gt;Goal&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tasks: [&amp;#10;        &amp;#123;id: 104, complete: false,            priority: &amp;#34;high&amp;#34;,&amp;#10;                  dueDate: &amp;#34;11/29/2013&amp;#34;,      member: &amp;#34;Scott&amp;#34;,&amp;#10;                  title: &amp;#34;Do something&amp;#34;,      created: &amp;#34;9/22/2013&amp;#34;&amp;#125;,&amp;#10;        &amp;#123;id: 105, complete: false,            priority: &amp;#34;medium&amp;#34;,&amp;#10;                  dueDate: &amp;#34;11/22/2013&amp;#34;,      member: &amp;#34;Lena&amp;#34;,&amp;#10;                  title: &amp;#34;Do something else&amp;#34;, created: &amp;#34;9/22/2013&amp;#34;&amp;#125;,&amp;#10;    // , ...&amp;#10;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The goal will be a function that accepts a &lt;code&gt;member&lt;/code&gt; parameter, then fetches the data from the server (or from some application cache), chooses the tasks for that member that are not complete, returns their ids, priorities, titles, and dues dates, sorted by due date.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asynchronous, we’ll hook everything together with promises.&lt;/li&gt;
&lt;li&gt;ignore all error-checking&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Imperative_Approach&quot;&gt;&lt;a href=&quot;#Imperative_Approach&quot; class=&quot;headerlink&quot; title=&quot;Imperative Approach&quot;&gt;&lt;/a&gt;Imperative Approach&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getIncompleteTaskSummariesForMember_imperative = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;memberName&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fetchData()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data.tasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = tasks.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tasks[i].member == memberName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    results.push(tasks[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = tasks.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!tasks[i].complete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    results.push(tasks[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [], task;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = tasks.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                task = tasks[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                results.push(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    id: task.id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    dueDate: task.dueDate,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    title: task.title,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    priority: task.priority&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tasks.sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;first, second&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first.dueDate - second.dueDate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Object-Oriented_Approach&quot;&gt;&lt;a href=&quot;#Object-Oriented_Approach&quot; class=&quot;headerlink&quot; title=&quot;Object-Oriented Approach&quot;&gt;&lt;/a&gt;Object-Oriented Approach&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getIncompleteTaskSummariesForMember_objectOriented = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;memberName&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fetchData()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; taskList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TaskList(data.tasks);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           taskList.chooseByMember(memberName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           taskList.chooseByCompletion(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newTaskList = taskList.getSummaries();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           newTaskList.sort(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TaskListSorter(&lt;span class=&quot;string&quot;&gt;&quot;dueDate&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newTaskList.tasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var TaskList = (function() &amp;#123;&amp;#10;    var TaskList = function(/*Task[]*/ tasks) &amp;#123;&amp;#10;        this.tasks = tasks;&amp;#10;    &amp;#125;;&amp;#10;    TaskList.prototype.chooseByMember = function(memberName) &amp;#123;&amp;#10;        var results = [];&amp;#10;        for (var i = 0, len = this.tasks.length; i &amp;#60; len; i++) &amp;#123;&amp;#10;            if (this.tasks[i].member === memberName) &amp;#123;&amp;#10;                results.push(this.tasks[i]);&amp;#10;            &amp;#125;&amp;#10;        &amp;#125;&amp;#10;        this.tasks = results;&amp;#10;    &amp;#125;;&amp;#10;    TaskList.prototype.chooseByCompletion = function(completion) &amp;#123;&amp;#10;        var results = [];&amp;#10;        for (var i = 0, len = this.tasks.length; i &amp;#60; len; i++) &amp;#123;&amp;#10;            if (this.tasks[i].complete == completion) &amp;#123;&amp;#10;                results.push(this.tasks[i]);&amp;#10;            &amp;#125;&amp;#10;        &amp;#125;&amp;#10;        this.tasks = results;&amp;#10;    &amp;#125;;&amp;#10;    TaskList.prototype.getSummaries = function() &amp;#123;&amp;#10;            var results = [], task;&amp;#10;            for (var i = 0, len = this.tasks.length; i &amp;#60; len; i++) &amp;#123;&amp;#10;                task = this.tasks[i];&amp;#10;                results.push(&amp;#123;&amp;#10;                    id: task.id,&amp;#10;                    dueDate: task.dueDate,&amp;#10;                    title: task.title,&amp;#10;                    priority: task.priority&amp;#10;                &amp;#125;)&amp;#10;            &amp;#125;&amp;#10;            return new TaskList(results);&amp;#10;        &amp;#125;;&amp;#10;&amp;#10;        TaskList.prototype.sort = function(/*TaskListSorter*/ sorter) &amp;#123;&amp;#10;            this.tasks.sort(sorter.getSortFunction());&amp;#10;        &amp;#125;;&amp;#10;&amp;#10;        return TaskList;&amp;#10;    &amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var TaskListSorter = (function()  &amp;#123;&amp;#10;    var TaskListSorter = function(propName) &amp;#123;&amp;#10;        this.propName = propName;&amp;#10;    &amp;#125;;&amp;#10;    TaskListSorter.prototype.getSortFunction = function() &amp;#123;&amp;#10;        var propName = this.propName;&amp;#10;        return function(first, second) &amp;#123;&amp;#10;            return first[propName] &amp;#60; second[propName] ? -1 :&amp;#10;                   first[propName] &amp;#62; second[propName] ? +1 : 0;&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;;&amp;#10;&amp;#10;    return TaskListSorter;&amp;#10;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The contents of the functions are much the same; it’s the way they are organized that varies.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Converting_to_Functional_Code&quot;&gt;&lt;a href=&quot;#Converting_to_Functional_Code&quot; class=&quot;headerlink&quot; title=&quot;Converting to Functional Code&quot;&gt;&lt;/a&gt;Converting to Functional Code&lt;/h2&gt;&lt;p&gt;The process for the remainder of this talk will be to convert this code into concise, readable, functional code, one block at a time, explaining some of the basic building blocks of functional programming as we go. First up is this little function:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data.tasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Functional version&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(prop(&lt;span class=&quot;string&quot;&gt;&#39;tasks&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So the obvious question, then, is, what is the &lt;strong&gt;prop&lt;/strong&gt; function?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;The_prop_function&quot;&gt;&lt;a href=&quot;#The_prop_function&quot; class=&quot;headerlink&quot; title=&quot;The prop function&quot;&gt;&lt;/a&gt;The prop function&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = _curry2(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;p, obj&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj[p]; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Our &lt;strong&gt;then&lt;/strong&gt; call needs a function, so &lt;strong&gt;curry&lt;/strong&gt; must be doing something interesting with this function, which should return an object propery, to instead returning a new function. So we need to take a detour to discuss &lt;strong&gt;curry&lt;/strong&gt; a bit.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Currying_Functions&quot;&gt;&lt;a href=&quot;#Currying_Functions&quot; class=&quot;headerlink&quot; title=&quot;Currying Functions&quot;&gt;&lt;/a&gt;Currying Functions&lt;/h2&gt;&lt;p&gt;Currying is the process of converting functions that take multiple arguments into ones that, when supplied fewer arguments, return new functions that accept the remaining ones.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; addFourNumbers = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b, c, d&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b + c + d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; curriedAddFourNumbers = R.curry(addFourNumbers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = curriedAddFourNumbers(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; g = f(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;g(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//=&amp;gt; 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Back_to_get&quot;&gt;&lt;a href=&quot;#Back_to_get&quot; class=&quot;headerlink&quot; title=&quot;Back to get&quot;&gt;&lt;/a&gt;Back to get&lt;/h2&gt;&lt;p&gt;Now that we understand curry, we can see that a manually curried version of this function might look like this:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prop = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prop&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj[prop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And that means that our new &lt;strong&gt;get(‘tasks’)&lt;/strong&gt; is equivalent to&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj[&lt;span class=&quot;string&quot;&gt;&#39;tasks&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Filtering&quot;&gt;&lt;a href=&quot;#Filtering&quot; class=&quot;headerlink&quot; title=&quot;Filtering&quot;&gt;&lt;/a&gt;Filtering&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = tasks.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tasks[i].member == memberName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            results.push(tasks[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;Functional version&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;task&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; task.member == memberName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;But we’ve done something more important too: We’ve moved the focus from iteration and updating the state of a local collection to the real point of this block: choosing the tasks with the proper member property.&lt;/p&gt;
&lt;p&gt;One of the most important features of functional programming is that it makes it easy to shift focus in this manner.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Rejecting_elements&quot;&gt;&lt;a href=&quot;#Rejecting_elements&quot; class=&quot;headerlink&quot; title=&quot;Rejecting elements&quot;&gt;&lt;/a&gt;Rejecting elements&lt;/h2&gt;&lt;p&gt;The next block is similar, except that instead of using filter, we will use reject, which behaves exactly the same except that it chooses those members of the list that don’t match the predicate. We replace this code:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = tasks.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!tasks[i].complete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            results.push(tasks[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;with this:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(reject(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;task&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; task.complete === &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Refactoring&quot;&gt;&lt;a href=&quot;#Refactoring&quot; class=&quot;headerlink&quot; title=&quot;Refactoring&quot;&gt;&lt;/a&gt;Refactoring&lt;/h2&gt;&lt;p&gt;A reasonable question would be why with didn’t do this instead, which would work equally well:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(filter(function(task) &amp;#123;&amp;#10;    return task.complete !== true;&amp;#10;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The reason is that the similarity between these two blocks will offer us a chance to refactor our code into something still more descriptive:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function(task) &amp;#123;&amp;#10;    return task.member == memberName;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function(task) &amp;#123;&amp;#10;    return task.complete === true;&amp;#10;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Both of these functions accept an object and return a boolean that describes whether a particular property of the object has a given value. Perhaps a good name for a function that generates such functions would be &lt;strong&gt;propEq&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Implementing_propEq&quot;&gt;&lt;a href=&quot;#Implementing_propEq&quot; class=&quot;headerlink&quot; title=&quot;Implementing propEq&quot;&gt;&lt;/a&gt;Implementing propEq&lt;/h2&gt;&lt;p&gt;Simplest Approach&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propEq = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prop, val&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj[prop] === val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This works, and we could leave it there, but we’re going to take another detour into a popular style of functional programming known as &lt;strong&gt;points-free&lt;/strong&gt; coding.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Points-free_definitions&quot;&gt;&lt;a href=&quot;#Points-free_definitions&quot; class=&quot;headerlink&quot; title=&quot;Points-free definitions&quot;&gt;&lt;/a&gt;Points-free definitions&lt;/h2&gt;&lt;p&gt;With the functions &lt;strong&gt;add&lt;/strong&gt; (which adds two numbers) and &lt;strong&gt;reduce&lt;/strong&gt; (which runs the supplied function against an accumulator and each element of the list, feeding the result of each call into the next one and returning the final result), we can easily define a &lt;strong&gt;sum&lt;/strong&gt; function like this:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;list&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reduce(add, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Because of the automatic currying, though, the following is entirely equivalent:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = reduce(add, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This is the &lt;strong&gt;points-free&lt;/strong&gt; style, defining functions without ever making direct reference to their arguments.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Wikipedia&lt;/strong&gt;&lt;br&gt;&amp;gt;&lt;br&gt;Tacit [point-free] programming is a programming paradigm in which a function definition does not include information regarding its arguments, using combinators and function composition (but not ?-abstraction) instead of variables.&lt;/p&gt;
&lt;p&gt;There are plenty of reasons to like it, but the most important one might just be the simplicity. There is a great deal to be said for elegant, readable code.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;A_points-free_version_of_propEq&quot;&gt;&lt;a href=&quot;#A_points-free_version_of_propEq&quot; class=&quot;headerlink&quot; title=&quot;A points-free version of propEq&quot;&gt;&lt;/a&gt;A points-free version of propEq&lt;/h2&gt;&lt;p&gt;Can we redefine the following in a points-free style?&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propEq = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prop, val&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj[prop] === val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Here’s a version that is closer to points-free, removing the direct reference to obj:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propEq = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prop, val&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; compose(eq(val), get(prop));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Huh? What? &lt;strong&gt;compose&lt;/strong&gt;? &lt;strong&gt;eq&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;eq&lt;/strong&gt; is easy: like all good functions of multiple parameters, it’s curried, and it simply reports whether its two arguments are equal. So &lt;strong&gt;eq(val)&lt;/strong&gt; is a function which reports whether its parameter has the same value as does &lt;strong&gt;val&lt;/strong&gt;. But now we need to discuss &lt;strong&gt;compose&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Functional_composition&quot;&gt;&lt;a href=&quot;#Functional_composition&quot; class=&quot;headerlink&quot; title=&quot;Functional composition&quot;&gt;&lt;/a&gt;Functional composition&lt;/h2&gt;&lt;p&gt;In mathematics &lt;strong&gt;f ∘ g&lt;/strong&gt; (pronounced “f composed with g”) is the function that given &lt;strong&gt;x&lt;/strong&gt;, returns &lt;strong&gt;f(g(x))&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So if we follow the mathematical model &lt;strong&gt;compose(add1, square)(x)&lt;/strong&gt; should equal &lt;strong&gt;add1(square(x))&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Simplest Implementation&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; compose = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;f, g&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f(g(x));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note that &lt;strong&gt;Ramda&lt;/strong&gt; also defines &lt;strong&gt;pipe&lt;/strong&gt;, which does much the same thing, but runs the functions in the opposite order. So &lt;strong&gt;pipe(add1, square)(x)&lt;/strong&gt; equals &lt;strong&gt;square(add1(x))&lt;/strong&gt;. Both styles have their uses.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Back_to_propEq&quot;&gt;&lt;a href=&quot;#Back_to_propEq&quot; class=&quot;headerlink&quot; title=&quot;Back to propEq&quot;&gt;&lt;/a&gt;Back to propEq&lt;/h2&gt;&lt;p&gt;So now this definition makes sense:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propEq = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prop, val&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pipe(get(prop), eq(val));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note the switch from &lt;strong&gt;compose&lt;/strong&gt; to &lt;strong&gt;pipe&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This gives us a further way to clean it up, and make it entirely &lt;strong&gt;points-free&lt;/strong&gt;, using a useful feature of Ramda we haven’t seen implemented in other libraries, which we call (for now) &lt;strong&gt;callWith&lt;/strong&gt;. Used like &lt;strong&gt;callWith(fn, transformer1, … transformerN)&lt;/strong&gt;, this returns a function which accepts N parameters, feeds them to the respective transformers, and then calls &lt;strong&gt;fn&lt;/strong&gt; using the results of all these. This gives us the final version of propEq:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propEq = callWith(pipe, get, eq);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Definition_of_propEq&quot;&gt;&lt;a href=&quot;#Definition_of_propEq&quot; class=&quot;headerlink&quot; title=&quot;Definition of propEq&quot;&gt;&lt;/a&gt;Definition of propEq&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module.exports = _curry3(function propEq(name, val, obj) &amp;#123;&amp;#10;  return _eq(obj[name], val);&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Using_our_new_function&quot;&gt;&lt;a href=&quot;#Using_our_new_function&quot; class=&quot;headerlink&quot; title=&quot;Using our new function&quot;&gt;&lt;/a&gt;Using our new function&lt;/h2&gt;&lt;p&gt;Still, all these explanations aside, it was only a minute or two of work to do this refactoring and arrive at a fairly simple version of &lt;strong&gt;propEq&lt;/strong&gt;. We would plug it back in like this:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propEq = callWith(pipe, get, eq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then(filter(propEq(&lt;span class=&quot;string&quot;&gt;&#39;member&#39;&lt;/span&gt;, memberName)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then(reject(propEq(&lt;span class=&quot;string&quot;&gt;&#39;complete&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;New_objects_from_old&quot;&gt;&lt;a href=&quot;#New_objects_from_old&quot; class=&quot;headerlink&quot; title=&quot;New objects from old&quot;&gt;&lt;/a&gt;New objects from old&lt;/h2&gt;&lt;p&gt;The next block we wanted to update looked like this:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [], task;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = tasks.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        task = tasks[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        results.push(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            id: task.id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dueDate: task.dueDate,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            title: task.title,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            priority: task.priority&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Functional version:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(map(pick([&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dueDate&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;priority&#39;&lt;/span&gt;])))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You’re a smart bunch, right? I probably don’t even have to explain what pick does, right?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;The_map_function&quot;&gt;&lt;a href=&quot;#The_map_function&quot; class=&quot;headerlink&quot; title=&quot;The map function&quot;&gt;&lt;/a&gt;The &lt;strong&gt;map&lt;/strong&gt; function&lt;/h2&gt;&lt;p&gt;One of the most fundamental functions used in FP is &lt;strong&gt;map&lt;/strong&gt;, which is used to convert one list into a related one by running the same function against each member.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fiveSquares = map(square, [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; [1, 4, 9, 16, 25];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; shouts = map(toUpperCase, [&lt;span class=&quot;string&quot;&gt;&quot;oy&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;vey&quot;&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;//=&amp;gt; [&quot;OY&quot;, &quot;VEY&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There isn’t much more to say about &lt;strong&gt;map&lt;/strong&gt;, but it’s important to point out that this function and &lt;strong&gt;reduce&lt;/strong&gt;, which we mentioned briefly earlier, are among the most important functional programming tools around.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Partial_clones_of_our_objects&quot;&gt;&lt;a href=&quot;#Partial_clones_of_our_objects&quot; class=&quot;headerlink&quot; title=&quot;Partial clones of our objects&quot;&gt;&lt;/a&gt;Partial clones of our objects&lt;/h2&gt;&lt;p&gt;We used map like this:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(map(pick([&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dueDate&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;priority&#39;&lt;/span&gt;])))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The magic of currying is again at work here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pick&lt;/strong&gt; accepts a list of properties and an object and return a partial clone, copying those properties from the original. Since we just pass in the properties, this curried function returns a new function that accepts an object and returns that partial clone.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt; accepts a function and a list an applies the function to the list. But because it’s curried, and because we supply only the function generated by the curried pick, this one also returns a new function which will accept a list and create these partial clones of each element in the list.&lt;/li&gt;
&lt;li&gt;This function is passed to &lt;strong&gt;then&lt;/strong&gt;, which will simply pass along its parameter (whenever that becomes ready) to our function and “return” the result of running our function against it. (We simply know because of the way prior calls have been built that this will be a list of tasks.)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;A_final_task_of_some_sort&quot;&gt;&lt;a href=&quot;#A_final_task_of_some_sort&quot; class=&quot;headerlink&quot; title=&quot;A final task of some sort&quot;&gt;&lt;/a&gt;A final task of some sort&lt;/h2&gt;&lt;p&gt;The last segment we wanted to convert looked like this:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(function(tasks) &amp;#123;&amp;#10;    tasks.sort(function(first, second) &amp;#123;&amp;#10;        return first.dueDate - second.dueDate;&amp;#10;    &amp;#125;);&amp;#10;    return tasks;&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Sorts the list according to a key generated by the supplied function.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sortByFirstItem = R.sortBy(prop(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pairs = [[-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], [-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], [-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sortByFirstItem(pairs); &lt;span class=&quot;comment&quot;&gt;//=&amp;gt; [[-3, 3], [-2, 2], [-1, 1]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Again_with_the_curry&quot;&gt;&lt;a href=&quot;#Again_with_the_curry&quot; class=&quot;headerlink&quot; title=&quot;Again with the curry&quot;&gt;&lt;/a&gt;Again with the curry&lt;/h2&gt;&lt;p&gt;Again, we take advantage of the fact that our important functions are curried, and use &lt;strong&gt;prop(‘dueDate’)&lt;/strong&gt;. This creates a function that, fed one of our task objects, returns its due date. We can feed this into &lt;strong&gt;sortBy&lt;/strong&gt; to get the following:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(sortBy(prop(&amp;#39;dueDate&amp;#39;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;While this is not a lot less code than the original:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tasks.sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;first, second&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first.dueDate - second.dueDate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;it clearly is a savings. However, much more importantly, the code is all clearly aimed at our problem.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Recap__u2013_Imperative&quot;&gt;&lt;a href=&quot;#Recap__u2013_Imperative&quot; class=&quot;headerlink&quot; title=&quot;Recap – Imperative&quot;&gt;&lt;/a&gt;Recap – Imperative&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getIncompleteTaskSummariesForMember_imperative = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;memberName&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fetchData()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data.tasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = tasks.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tasks[i].member == memberName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    results.push(tasks[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = tasks.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!tasks[i].complete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    results.push(tasks[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [], task;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = tasks.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                task = tasks[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                results.push(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    id: task.id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    dueDate: task.dueDate,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    title: task.title,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    priority: task.priority&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tasks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tasks.sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;first, second&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first.dueDate - second.dueDate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Recap__u2013_Functional&quot;&gt;&lt;a href=&quot;#Recap__u2013_Functional&quot; class=&quot;headerlink&quot; title=&quot;Recap – Functional&quot;&gt;&lt;/a&gt;Recap – Functional&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getIncompleteTaskSummariesForMemberFunctional = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;memberName&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fetchData()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(get(&lt;span class=&quot;string&quot;&gt;&#39;tasks&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(filter(propEq(&lt;span class=&quot;string&quot;&gt;&#39;member&#39;&lt;/span&gt;, memberName)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(reject(propEq(&lt;span class=&quot;string&quot;&gt;&#39;complete&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(map(pick([&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dueDate&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;priority&#39;&lt;/span&gt;])))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(sortBy(get(&lt;span class=&quot;string&quot;&gt;&#39;dueDate&#39;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Most_Important_Functions&quot;&gt;&lt;a href=&quot;#Most_Important_Functions&quot; class=&quot;headerlink&quot; title=&quot;Most Important Functions&quot;&gt;&lt;/a&gt;Most Important Functions&lt;/h2&gt;&lt;p&gt;We’ve seen what are probably the most important functions in functional programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;compose&lt;/li&gt;
&lt;li&gt;curry&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s one that to some might be conspicuous by it’s absence:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forEach&lt;br&gt;Maybe it is not actually appropriate to functional programming, as its main purpose is to help you achieve side-effects. But many libraries do include one.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;What_We_Gain_from_FP_Style&quot;&gt;&lt;a href=&quot;#What_We_Gain_from_FP_Style&quot; class=&quot;headerlink&quot; title=&quot;What We Gain from FP Style&quot;&gt;&lt;/a&gt;What We Gain from FP Style&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Elegance and simplicity&lt;/li&gt;
&lt;li&gt;Easier decomposition of problems&lt;/li&gt;
&lt;li&gt;Code more closely tied to the problem domain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;And through these, we can also achieve&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Straightforward unit testing&lt;/li&gt;
&lt;li&gt;Easier debugging&lt;/li&gt;
&lt;li&gt;Simple concurrency&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Agenda&quot;&gt;&lt;a href=&quot;#Agenda&quot; class=&quot;headerlink&quot; title=&quot;Agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;What is Functional Programming?&lt;/li&gt;
&lt;li&gt;How Fun
    
    </summary>
    
    
      <category term="FP" scheme="http://owenyang0.github.io/tags/FP/"/>
    
      <category term="Functional Programming" scheme="http://owenyang0.github.io/tags/Functional-Programming/"/>
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="Ramda" scheme="http://owenyang0.github.io/tags/Ramda/"/>
    
  </entry>
  
  <entry>
    <title>修复AWS上EC2损坏的sshd_config文件</title>
    <link href="http://owenyang0.github.io/2015/03/16/%E4%BF%AE%E5%A4%8DAWS%E4%B8%8AEC2%E6%8D%9F%E5%9D%8F%E7%9A%84sshd-config%E6%96%87%E4%BB%B6/"/>
    <id>http://owenyang0.github.io/2015/03/16/修复AWS上EC2损坏的sshd-config文件/</id>
    <published>2015-03-16T12:11:09.000Z</published>
    <updated>2015-03-16T12:21:57.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;常识：&lt;/strong&gt; AWS是没有root用户的，登陆也都是通过SSH KEY完成授权认证。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背景：&lt;/strong&gt; 正在AWS上搭一个&lt;code&gt;CI&lt;/code&gt; (GO)，与&lt;code&gt;gitlab&lt;/code&gt;，为了将其进行集成，需将gitlab的deploy key设置成GO的SSH KEY。然而，GO创建的是无密码的用户go，导致无法进入用户go的home目录。&lt;br&gt;正常 &lt;code&gt;su go&lt;/code&gt; 无法切换到go用户，当时又恰巧正在看SSH的config文件：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/etc/ssh/sshd_config&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;里面有一条 &lt;code&gt;PermitEmptyPasswords no&lt;/code&gt;，接着便私自改成了&lt;code&gt;yes&lt;/code&gt;，无用。&lt;code&gt;PermitRootLogin no&lt;/code&gt;，改成 &lt;code&gt;yes&lt;/code&gt;，依旧无用。&lt;br&gt;&lt;strong&gt;注：&lt;/strong&gt;废话，肯定没用啊，这是设置SSH的。&lt;/p&gt;
&lt;p&gt;正确的做法：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo su go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当修改之后，没改回来，当我退出AWS之后就杯具了。再也登陆到AWS上，因为登陆时却输密码，而实际却是没有密码。此时真想多天说一句：X。&lt;/p&gt;
&lt;p&gt;Google了很多解决方案，都说得是用Live CD，重新引导进入，然后挂载有sshd_config文件的磁盘并修复它。这在EC2上是根本不可能的，能做的只有把root磁盘卷拆卸，再装载到另外的EC2实例上，并修改相应的文件。以下便是详细操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭当前EC2实例&lt;/li&gt;
&lt;li&gt;将有错误sshd_config的磁盘(EBS)拆卸&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当磁盘重新装载到另一个EC2实例上，并挂载该磁盘&lt;br&gt;拆卸与装载都在AWS的console界面操作，装载成功后，可用以下命令挂载（我的新的磁盘名字是 xdf)：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir /mnt/other&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo mount /dev/xvdf /mnt/other&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑损坏的文件sshd_config，修复配置与语法错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;反挂载并拆卸掉该磁盘&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo umount /mnt/other&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再次将该磁盘装载到原EC2实例上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;启动原EC2实例，测试修改结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些做完之后，一切都如以前一样。又可以通过SSH KEY连上原来的实例。&lt;/p&gt;
&lt;h3 id=&quot;u7ED3_u8BBA&quot;&gt;&lt;a href=&quot;#u7ED3_u8BBA&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h3&gt;&lt;p&gt;教训是，永远别再一次做这种事。在适当的时候，也可以给你的编辑器sudo的权限，vim的配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cnoremap w!! %!sudo tee &amp;#62; /dev/null %&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;常识：&lt;/strong&gt; AWS是没有root用户的，登陆也都是通过SSH KEY完成授权认证。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背景：&lt;/strong&gt; 正在AWS上搭一个&lt;code&gt;CI&lt;/code&gt; (GO)，与&lt;code&gt;gitlab&lt;/code&gt;，为
    
    </summary>
    
    
      <category term="amazon-web-services" scheme="http://owenyang0.github.io/tags/amazon-web-services/"/>
    
      <category term="aws" scheme="http://owenyang0.github.io/tags/aws/"/>
    
      <category term="ec2" scheme="http://owenyang0.github.io/tags/ec2/"/>
    
      <category term="linux" scheme="http://owenyang0.github.io/tags/linux/"/>
    
      <category term="passwd" scheme="http://owenyang0.github.io/tags/passwd/"/>
    
      <category term="ssh" scheme="http://owenyang0.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>2014压过的辙痕</title>
    <link href="http://owenyang0.github.io/2015/02/22/2014%E5%8E%8B%E8%BF%87%E7%9A%84%E8%BE%99%E7%97%95/"/>
    <id>http://owenyang0.github.io/2015/02/22/2014压过的辙痕/</id>
    <published>2015-02-22T06:30:55.000Z</published>
    <updated>2016-01-02T17:18:52.000Z</updated>
    
    <content type="html">&lt;p&gt;2014过去2个月有余，才回过神来做一下去年的总结。自己的拖延症也是厉害，此时也希望不会太晚。不过，好歹也才刚过春节。&lt;br&gt;一年，从去学校毕业了。&lt;br&gt;一年，从实习到了试用，从新蛋到了TW。&lt;br&gt;一年，大家各奔东西，世界留给了一群追梦的人。&lt;br&gt;一年，又开始了一段新的人生罢。&lt;/p&gt;
&lt;p&gt;现在都记不得最初的梦想了，自己的追逐的意义依旧还是存在的，只是少了当初那份一往无前的勇气。&lt;br&gt;去年&lt;br&gt;&lt;img src=&quot;/images/goal_2014.png&quot; alt=&quot;2014 goal&quot;&gt;&lt;br&gt;今年&lt;br&gt;&lt;img src=&quot;/images/goal_2015.png&quot; alt=&quot;2015 goal&quot;&gt;&lt;br&gt;去年的整个计划是开始读书，可是真正执行起来才会发现并非想像中的那么容易。当然，也有其他，只是其他还算得上不易。&lt;/p&gt;
&lt;h3 id=&quot;1-__u8BFB_u4E66&quot;&gt;&lt;a href=&quot;#1-__u8BFB_u4E66&quot; class=&quot;headerlink&quot; title=&quot;1. 读书&quot;&gt;&lt;/a&gt;1. 读书&lt;/h3&gt;&lt;p&gt;人人都会，却又不是人人都会的技能。&lt;a href=&quot;http://book.douban.com/people/owenyang0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://book.douban.com/people/owenyang0/&lt;/a&gt;&lt;br&gt;我开始学会用豆瓣来Track自己的读书进度，年终还可以用来分析分析自己的读书倾向。不得不说豆瓣在这个方面，做得也还是不错的。给书友提供了一个平台，分享与交流。&lt;br&gt;相比一些个大神，一年上百本书的战果，我这根本不值一提。不过，自己也慢慢开始了自己的读书习惯，与计划。&lt;/p&gt;
&lt;h3 id=&quot;2-__u5199_u535A&quot;&gt;&lt;a href=&quot;#2-__u5199_u535A&quot; class=&quot;headerlink&quot; title=&quot;2. 写博&quot;&gt;&lt;/a&gt;2. 写博&lt;/h3&gt;&lt;p&gt;想写，却又不容易坚持的习惯。&lt;a href=&quot;http://www.cnblogs.com/owenyang/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/owenyang/&lt;/a&gt;&lt;br&gt;一直想写一些，或者坚持写一些博客，来记录自己的平凡但不应该平淡的生活。但实际情况，却还是一样：不太容易坚持。一年下来，总共有10篇博文。细看又是那么的不均匀，其中有4篇是在12月所写。原来效率，也不会是平均分布到整年。抓住时间，用每一分秒提高效率。&lt;/p&gt;
&lt;h3 id=&quot;3-__u521D_u5FC3&quot;&gt;&lt;a href=&quot;#3-__u521D_u5FC3&quot; class=&quot;headerlink&quot; title=&quot;3. 初心&quot;&gt;&lt;/a&gt;3. 初心&lt;/h3&gt;&lt;p&gt;想忘，又不忘，想而不舍忘。&lt;br&gt;和某人，在某时，去过某些地方。却又在，某时，走向了远方。既然，风筝早已远去，任你在风中如何摇曳，也终究拉不回曾经的时光。风在吹，某在飞，时光无法回流，选择只有向前而走。随心而行，是那么的不靠谱，不行动意味着不作为。有过开心，欢乐，但更多是在失去后所保留的执著。&lt;/p&gt;
&lt;p&gt;去年也成往事，还是今年的计划吧。&lt;br&gt;&lt;strong&gt;1.读书：&lt;/strong&gt;有人说，一年读50本书，才算得上是读书人。粗算一下，一周就得读一本，想想压力也是挺大的。去年一年的时间，也才20本。第二年，也别过分高估自己。今年30本吧。&lt;br&gt;&lt;strong&gt;2.写博：&lt;/strong&gt;别去想自己写多少，去想自己有多少可以写吧。保持不断学习的热情，一直学习下去，与分享下去。不只是技术，还有其他。&lt;br&gt;&lt;strong&gt;3.初心：&lt;/strong&gt;初心？初心是什么？不懂，忘了。只是希望自己的这一年，走得不会太艰难。&lt;/p&gt;
&lt;p&gt;最后一句话，留给自己：心态，别抑郁，要乐观，诚对人，能坚持，追梦想。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;2014过去2个月有余，才回过神来做一下去年的总结。自己的拖延症也是厉害，此时也希望不会太晚。不过，好歹也才刚过春节。&lt;br&gt;一年，从去学校毕业了。&lt;br&gt;一年，从实习到了试用，从新蛋到了TW。&lt;br&gt;一年，大家各奔东西，世界留给了一群追梦的人。&lt;br&gt;一年，又开始了一段新
    
    </summary>
    
    
      <category term="2014" scheme="http://owenyang0.github.io/tags/2014/"/>
    
      <category term="2015" scheme="http://owenyang0.github.io/tags/2015/"/>
    
      <category term="goal" scheme="http://owenyang0.github.io/tags/goal/"/>
    
      <category term="plan" scheme="http://owenyang0.github.io/tags/plan/"/>
    
      <category term="summary" scheme="http://owenyang0.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6中字符串的新特性</title>
    <link href="http://owenyang0.github.io/2015/02/12/New-string-features-in-ECMAScript-6/"/>
    <id>http://owenyang0.github.io/2015/02/12/New-string-features-in-ECMAScript-6/</id>
    <published>2015-02-12T12:26:43.000Z</published>
    <updated>2015-02-12T13:29:02.000Z</updated>
    
    <content type="html">&lt;p&gt;本文将覆盖在ECMAScript 6 (ES6)中，字符串的新特性。&lt;/p&gt;
&lt;h2 id=&quot;Unicode__u7801_u4F4D_28code_point_29_u8F6C_u4E49&quot;&gt;&lt;a href=&quot;#Unicode__u7801_u4F4D_28code_point_29_u8F6C_u4E49&quot; class=&quot;headerlink&quot; title=&quot;Unicode 码位(code point)转义&quot;&gt;&lt;/a&gt;Unicode 码位(code point)转义&lt;/h2&gt;&lt;p&gt;Unicode字符码位的长度是21位&lt;a href=&quot;http://speakingjs.com/es5/ch24.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[2]&lt;/a&gt;。而JavaScript的字符串，是16位的，以UTF-16的方式编码。因此，超出16位码长的码位范围(the Basic Multilingual Pane, BMP, 基本多文种平面)则用两个JavaScript字符表示。直到现在，如果想用数字指定这样的码位，需要两个叫Unicode转义符的东西。以下，则会以相应的码位(0x1F680)打印出一个火箭。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;\uD83D\uDE80&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在ECMAScript 6中，有一个新的Unicode转义符，能让你指定任意的码位（不用再管是否是16位）：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;\u&amp;#123;1F680&amp;#125;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;u5B57_u7B26_u4E32_u7684_u63D2_u503C_uFF0C_u591A_u884C_u53CA_u539F_u59CB_u5B57_u7B26_u8BED_u6CD5&quot;&gt;&lt;a href=&quot;#u5B57_u7B26_u4E32_u7684_u63D2_u503C_uFF0C_u591A_u884C_u53CA_u539F_u59CB_u5B57_u7B26_u8BED_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;字符串的插值，多行及原始字符语法&quot;&gt;&lt;/a&gt;字符串的插值，多行及原始字符语法&lt;/h2&gt;&lt;p&gt;模板字符串 &lt;a href=&quot;http://www.2ality.com/2011/09/quasi-literals.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[3]&lt;/a&gt;提供了3个有意思的特性。&lt;br&gt;&lt;strong&gt;1. 模板字符中，支持字符串插值：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; first = &lt;span class=&quot;string&quot;&gt;&#39;Jane&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; last = &lt;span class=&quot;string&quot;&gt;&#39;Doe&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;first&amp;#125;&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;$&amp;#123;last&amp;#125;&lt;/span&gt;!`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Hello Jane Doe!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 模板字符串可以包含多行：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; multiLine = &lt;span class=&quot;string&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  This is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  with multiple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  lines`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 模板字符串可以是原始的：&lt;/strong&gt;&lt;br&gt;若使用&lt;code&gt;String.raw&lt;/code&gt; 作为模板字符串的前缀，则模板字符串可以是&lt;em&gt;原始(raw)&lt;/em&gt;的。反斜线也不再是特殊字符，&lt;code&gt;\n&lt;/code&gt; 也不会被解释成换行符：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; raw = &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.raw&lt;span class=&quot;string&quot;&gt;`Not a newline: \n`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(raw === &lt;span class=&quot;string&quot;&gt;&#39;Not a newline: \\n&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;u5B57_u7B26_u4E32_u8FED_u4EE3_u90A3_u4E9B_u4E8B&quot;&gt;&lt;a href=&quot;#u5B57_u7B26_u4E32_u8FED_u4EE3_u90A3_u4E9B_u4E8B&quot; class=&quot;headerlink&quot; title=&quot;字符串迭代那些事&quot;&gt;&lt;/a&gt;字符串迭代那些事&lt;/h2&gt;&lt;p&gt;字符串是可迭代的 &lt;a href=&quot;http://www.2ality.com/2013/06/iterators-generators.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[4]&lt;/a&gt;，这就意味着可以使用&lt;code&gt;for-of&lt;/code&gt; 去迭代其中的字符：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ch &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;亦可用展开运行符(…) 将字符串转换成数组：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; chars = [...&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;u5904_u7406Unicode_u7684_u7801_u4F4D&quot;&gt;&lt;a href=&quot;#u5904_u7406Unicode_u7684_u7801_u4F4D&quot; class=&quot;headerlink&quot; title=&quot;处理Unicode的码位&quot;&gt;&lt;/a&gt;处理Unicode的码位&lt;/h3&gt;&lt;p&gt;字符串迭代器，会以码位边界将字符串进行划分。这将导致迭代器的返回值，会是一个或两个字符：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ch &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;x\uD83D\uDE80y&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ch.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这将会为我提供一个快速而简单的方法，去计算字符串Unicode码位的数量：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [...&lt;span class=&quot;string&quot;&gt;&#39;x\uD83D\uDE80y&#39;&lt;/span&gt;].length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这同样会在，不包含基本多文种平面(non-BMP)码位的字符串操作中提供方便。如：反转字符串：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;x\uD83D\uDE80y&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES5: \uD83D\uDE80 are (incorrectly) reversed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str.split(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;).reverse().join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;y\uDE80\uD83Dx&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES6: order of \uD83D\uDE80 is preserved&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log([...str].reverse().join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;y\uD83D\uDE80x&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是在firefox控制台中，两个反转之后的结果：&lt;br&gt;&lt;img src=&quot;/images/firefox_unicode.png&quot; alt=&quot;Unicode in Firefox&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;u7801_u4F4D_u4E2D_u6570_u503C&quot;&gt;&lt;a href=&quot;#u7801_u4F4D_u4E2D_u6570_u503C&quot; class=&quot;headerlink&quot; title=&quot;码位中数值&quot;&gt;&lt;/a&gt;码位中数值&lt;/h3&gt;&lt;p&gt;有一个新的方法 &lt;code&gt;codePointAt()&lt;/code&gt; 将返回字符串，给定索引的码位数字值：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;x\uD83D\uDE80y&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str.codePointAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// 78&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str.codePointAt(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// 1f680&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str.codePointAt(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// 79&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该方法在与字符串迭代操作结合时，也能很好的运行使用：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ch &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;x\uD83D\uDE80y&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ch.codePointAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 78&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1f680&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 79&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与方法&lt;code&gt;codePointAt()&lt;/code&gt;相对的则是&lt;code&gt;String.fromCodePoint()&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCodePoint(&lt;span class=&quot;number&quot;&gt;0x78&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x1f680&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x79&lt;/span&gt;) === &lt;span class=&quot;string&quot;&gt;&#39;x\uD83D\uDE80y&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;u5305_u542B_u4E0E_u91CD_u8981_u5B57_u7B26_u4E32_u7684_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u5305_u542B_u4E0E_u91CD_u8981_u5B57_u7B26_u4E32_u7684_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;包含与重要字符串的方法&quot;&gt;&lt;/a&gt;包含与重要字符串的方法&lt;/h2&gt;&lt;p&gt;有三个方法，可以检查一个字符串是否存在于另一个字符串：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;.startsWith(&lt;span class=&quot;string&quot;&gt;&#39;hell&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;.endsWith(&lt;span class=&quot;string&quot;&gt;&#39;ello&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;.includes(&lt;span class=&quot;string&quot;&gt;&#39;ell&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每一个方法都有一个可选的，第二个参数。可以指定被搜寻字符串的开始或结束位置：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;.startsWith(&lt;span class=&quot;string&quot;&gt;&#39;ello&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;.endsWith(&lt;span class=&quot;string&quot;&gt;&#39;hell&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;.includes(&lt;span class=&quot;string&quot;&gt;&#39;ell&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;.includes(&lt;span class=&quot;string&quot;&gt;&#39;ell&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;方法&lt;code&gt;repeat()&lt;/code&gt; 则用以重复某个字符串：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;doo &#39;&lt;/span&gt;.repeat(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;doo doo doo &#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;u6240_u6709_u65B0_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u6240_u6709_u65B0_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;所有新方法&quot;&gt;&lt;/a&gt;所有新方法&lt;/h2&gt;&lt;h3 id=&quot;u6A21_u677F_u5B57_u7B26_u4E32_uFF1A&quot;&gt;&lt;a href=&quot;#u6A21_u677F_u5B57_u7B26_u4E32_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;模板字符串：&quot;&gt;&lt;/a&gt;模板字符串：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;String.raw(callSite, …substitutions) : string&lt;br&gt;用于产生&lt;em&gt;原始(raw)&lt;/em&gt;字串(反斜杠不会被转义)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Unicode_u548C_u7801_u4F4D_uFF1A&quot;&gt;&lt;a href=&quot;#Unicode_u548C_u7801_u4F4D_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;Unicode和码位：&quot;&gt;&lt;/a&gt;Unicode和码位：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;String.fromCodePoint(…codePoints : number[]) : string&lt;br&gt;将数字值码位转换成字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;String.prototype.codePointAt(pos) : number&lt;br&gt;返回码位开始位置的数字值(会包含一个或两个JavaScript的字符)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;String.prototype.normalize(form? : string) : string&lt;br&gt;不同的码位组合，最后可能有一致的显示。&lt;a href=&quot;/&quot;&gt;Unicode normalization&lt;/a&gt;可以将它们转化成同样的值，这会被叫做规范的表示方式(canonical representation)。这将有助于比较和查找字符串。在一般的文本之中，’NFC’是一种被推荐的形式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u67E5_u627E_u5B57_u7B26_u4E32_uFF1A&quot;&gt;&lt;a href=&quot;#u67E5_u627E_u5B57_u7B26_u4E32_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;查找字符串：&quot;&gt;&lt;/a&gt;查找字符串：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;String.prototype.startsWith(searchString, position=0) : boolean&lt;br&gt;检查一个字符串是否以另一个字符串(searchString)开始。位置(position)指定从哪开始执行检查。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;String.prototype.endsWith(searchString, endPosition=searchString.length) : boolean&lt;br&gt;检查一个字符串是否以另一个字符串(searchString)结尾。结束位置(endPosition)指定在哪执行结尾检查。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;String.prototype.includes(searchString, position=0) : boolean&lt;br&gt;检查一个字符字符串是否包含另一个字符串(searchString)。位置(position)指定从哪开始检查。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u91CD_u590D_u5B57_u7B26_u4E32_uFF1A&quot;&gt;&lt;a href=&quot;#u91CD_u590D_u5B57_u7B26_u4E32_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;重复字符串：&quot;&gt;&lt;/a&gt;重复字符串：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;String.prototype.repeat(count) : string&lt;br&gt;返回给定字符串N次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u53C2_u8003&quot;&gt;&lt;a href=&quot;#u53C2_u8003&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2014/08/es6-today.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using ECMAScript 6 today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chapter 24, “&lt;a href=&quot;http://speakingjs.com/es5/ch24.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unicode and JavaScript&lt;/a&gt;” of “Speaking JavaScript”; includes an introduction to Unicode.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2011/09/quasi-literals.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Template strings: embedded DSLs in ECMAScript 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2013/06/iterators-generators.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Iterators and generators in ECMAScript 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译自 &lt;a href=&quot;http://www.2ality.com/2015/01/es6-strings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;New string features in ECMAScript 6&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文将覆盖在ECMAScript 6 (ES6)中，字符串的新特性。&lt;/p&gt;
&lt;h2 id=&quot;Unicode__u7801_u4F4D_28code_point_29_u8F6C_u4E49&quot;&gt;&lt;a href=&quot;#Unicode__u7801_u4F4D_28code_po
    
    </summary>
    
    
      <category term="ECMAScript 6" scheme="http://owenyang0.github.io/tags/ECMAScript-6/"/>
    
      <category term="ES6" scheme="http://owenyang0.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="Template" scheme="http://owenyang0.github.io/tags/Template/"/>
    
      <category term="Template String" scheme="http://owenyang0.github.io/tags/Template-String/"/>
    
  </entry>
  
  <entry>
    <title>NPM install - killed error solution</title>
    <link href="http://owenyang0.github.io/2015/02/09/NPM-install-killed-error-solution/"/>
    <id>http://owenyang0.github.io/2015/02/09/NPM-install-killed-error-solution/</id>
    <published>2015-02-09T11:29:46.000Z</published>
    <updated>2015-02-09T11:36:23.000Z</updated>
    
    <content type="html">&lt;p&gt;在接手一个Node项目的时候，&lt;code&gt;npm install&lt;/code&gt;。却出现了”killed”的错误。以为是Node版本的问题，熟练地切换了0.11与0.10版，同样无解。&lt;br&gt;由于新的npm版本吧，&lt;code&gt;npm install&lt;/code&gt;的时候已经无法看到常规的log信息了。以&lt;code&gt;npm install -d&lt;/code&gt;查看安装的过程，发现无任何特殊的地方。在一定程度的时候，直接被”killed”。关于&lt;code&gt;npm install -d&lt;/code&gt;可以看 &lt;a href=&quot;https://docs.npmjs.com/misc/config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm config&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-v: --version&amp;#10;-h, -?, --help, -H: --usage&amp;#10;-s, --silent: --loglevel silent&amp;#10;-q, --quiet: --loglevel warn&amp;#10;-d: --loglevel info&amp;#10;-dd, --verbose: --loglevel verbose&amp;#10;-ddd: --loglevel silly&amp;#10;-g: --global&amp;#10;-C: --prefix&amp;#10;-l: --long&amp;#10;-m: --message&amp;#10;-p, --porcelain: --parseable&amp;#10;-reg: --registry&amp;#10;-f: --force&amp;#10;-desc: --description&amp;#10;-S: --save&amp;#10;-D: --save-dev&amp;#10;-O: --save-optional&amp;#10;-B: --save-bundle&amp;#10;-E: --save-exact&amp;#10;-y: --yes&amp;#10;-n: --yes false&amp;#10;ll and la commands: ls --long&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后才想到，可能是内存不够了。由于是以vagrant启动的一台ubuntu14.04的虚拟机，默认只有500M的内存。而且该项目会用到一些底层的npm包，会编译一些代码。这就导致了内存不够用。&lt;br&gt;可以查一下相应的系统log，在路径 &lt;code&gt;/var/log&lt;/code&gt;之下，确认自己的问题。如&lt;code&gt;/var/log/syslog&lt;/code&gt; 和 &lt;code&gt;/var/log/messages&lt;/code&gt;等。&lt;/p&gt;
&lt;h3 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h3&gt;&lt;h4 id=&quot;1-__u589E_u5927_u5185_u5B58_u3002&quot;&gt;&lt;a href=&quot;#1-__u589E_u5927_u5185_u5B58_u3002&quot; class=&quot;headerlink&quot; title=&quot;1. 增大内存。&quot;&gt;&lt;/a&gt;1. 增大内存。&lt;/h4&gt;&lt;p&gt;由于我是虚拟机，所有增大内存相对简单。在vagrantfile里，只需要增加一条：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;config.vm.provider &amp;#34;virtualbox&amp;#34; do |v|&amp;#10;  v.memory = 1024&amp;#10;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即可。&lt;/p&gt;
&lt;h4 id=&quot;2-__u5229_u7528swap_file_u5B9E_u73B0_u865A_u62DF_u5185_u5B58&quot;&gt;&lt;a href=&quot;#2-__u5229_u7528swap_file_u5B9E_u73B0_u865A_u62DF_u5185_u5B58&quot; class=&quot;headerlink&quot; title=&quot;2. 利用swap file实现虚拟内存&quot;&gt;&lt;/a&gt;2. 利用swap file实现虚拟内存&lt;/h4&gt;&lt;p&gt;使用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo swapon -s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看系统是否配置了交换区域。没有的话， 便直接开始创建swap file。&lt;br&gt;创建一个1G的文件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo fallocate -l 1G /swapfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls -lh /swapfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;确认是否是自己所需要的文件大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;启用Swap文件&lt;/strong&gt;&lt;br&gt;首先调整文件的权限，若该文件能被其他用户随意的读写，则会产生很大的安全隐患。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo chmod 600 /swapfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在安全多了，可以让系统开始设置交换区域了。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkswap /swapfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启用该文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo swapon /swapfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在基本的步骤已经完成了，可以使用最初的命令验证swap file是否正确使用。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo swapon -s&amp;#10;&amp;#10;Filename                    Type          Size     Used     Priority&amp;#10;/swapfile                               file          1048572     0     -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;交换分区已经成功设置，系统会在必要的时候使用它。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;br&gt;现在已经启用了swap文件，但当我们重启的时候，系统不会自动地启用该swap文件。可以通过修改&lt;code&gt;fstab&lt;/code&gt;文件实现开机使用swap文件。&lt;br&gt;用root权限编辑&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/fstab&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在文件的最后，需要添加一行告诉操作系统自动使用swap文件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/swapfile   none    swap    sw    0   0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如此再&lt;code&gt;npm install&lt;/code&gt; 的时候，便解决了所有的问题了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在接手一个Node项目的时候，&lt;code&gt;npm install&lt;/code&gt;。却出现了”killed”的错误。以为是Node版本的问题，熟练地切换了0.11与0.10版，同样无解。&lt;br&gt;由于新的npm版本吧，&lt;code&gt;npm install&lt;/code&gt;的时候已经无法
    
    </summary>
    
    
      <category term="killed" scheme="http://owenyang0.github.io/tags/killed/"/>
    
      <category term="memory" scheme="http://owenyang0.github.io/tags/memory/"/>
    
      <category term="npm" scheme="http://owenyang0.github.io/tags/npm/"/>
    
      <category term="npm install" scheme="http://owenyang0.github.io/tags/npm-install/"/>
    
      <category term="npm install killed" scheme="http://owenyang0.github.io/tags/npm-install-killed/"/>
    
  </entry>
  
  <entry>
    <title>React JS快速开始手册</title>
    <link href="http://owenyang0.github.io/2015/01/17/The-React-Quick-Start-Guide/"/>
    <id>http://owenyang0.github.io/2015/01/17/The-React-Quick-Start-Guide/</id>
    <published>2015-01-17T03:19:11.000Z</published>
    <updated>2015-01-18T01:03:46.000Z</updated>
    
    <content type="html">&lt;p&gt;怎样用React JS构建一个用户界面？本文将快速地给你一个React JS的概览。代码，请君移步&lt;a href=&quot;https://github.com/owenyang0/react-starter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-starter&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;u6982_u5FF5&quot;&gt;&lt;a href=&quot;#u6982_u5FF5&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;React只有很少的API，这使得它很容易去学习与理解。当然，使用它也是相当有意思的。但是，简约却并不简单。在我们开始之前，有一些概念是需要去理解的。&lt;/p&gt;
&lt;h3 id=&quot;React_u5143_u7D20_28React_elements_29&quot;&gt;&lt;a href=&quot;#React_u5143_u7D20_28React_elements_29&quot; class=&quot;headerlink&quot; title=&quot;React元素(React elements)&quot;&gt;&lt;/a&gt;React元素(React elements)&lt;/h3&gt;&lt;p&gt;React元素是用于呈现HTML结构的JavaScript对象。它们不会存在于浏览器中，只是用于描述浏览器中的元素，比如&lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt; 或者 &lt;code&gt;section&lt;/code&gt;等等。&lt;/p&gt;
&lt;h3 id=&quot;u6A21_u5757_28Components_29&quot;&gt;&lt;a href=&quot;#u6A21_u5757_28Components_29&quot; class=&quot;headerlink&quot; title=&quot;模块(Components)&quot;&gt;&lt;/a&gt;模块(Components)&lt;/h3&gt;&lt;p&gt;模块是开发者创建的React元素。它们通过比用户界面的范围要大，因为它们同时包含了其结构与功能。想像一下导航栏，点赞按钮，图片上传这些模块的概念。&lt;/p&gt;
&lt;h3 id=&quot;JSX&quot;&gt;&lt;a href=&quot;#JSX&quot; class=&quot;headerlink&quot; title=&quot;JSX&quot;&gt;&lt;/a&gt;JSX&lt;/h3&gt;&lt;p&gt;JSX是一种用于创建React元素和模块的技术，或者说是规范、语言。比如 &lt;code&gt;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;&lt;/code&gt; 便是一个用JSX所写的React元素。同样的React元素，可以用原生的JavaScript实现，即 &lt;code&gt;React.DOM.h1(null, &amp;#39;Hello&amp;#39;);&lt;/code&gt;。相比原生的JavaScript，JSX更加简洁。会让你花更少的精力去读和写代码，在上线的时候将其转换成原生的JavaScript即可。&lt;/p&gt;
&lt;h3 id=&quot;u865A_u62DFDOM_28Virtual_DOM_29&quot;&gt;&lt;a href=&quot;#u865A_u62DFDOM_28Virtual_DOM_29&quot; class=&quot;headerlink&quot; title=&quot;虚拟DOM(Virtual DOM)&quot;&gt;&lt;/a&gt;虚拟DOM(Virtual DOM)&lt;/h3&gt;&lt;p&gt;虚拟DOM是一个JavaScript的树形结构，包含了React元素和模块。React通过渲染虚拟DOM到浏览器，使得用户界面得以显示。React也会观察虚拟DOM的变化，根据虚拟DOM自动地改变浏览器DOM元素。&lt;/p&gt;
&lt;p&gt;了解了这些概念之后，我们就可以畅快地敲React代码了。这里将会创建一系列的用户界面，每一个界面都将提前添加一层功能层。我们会做一个类似instagram的应用 - 当然，这个很粗糙。&lt;/p&gt;
&lt;h2 id=&quot;u6E32_u67D3_28Rendering_29&quot;&gt;&lt;a href=&quot;#u6E32_u67D3_28Rendering_29&quot; class=&quot;headerlink&quot; title=&quot;渲染(Rendering)&quot;&gt;&lt;/a&gt;渲染(Rendering)&lt;/h2&gt;&lt;p&gt;业务的第一步是渲染一个虚拟的元素(React元素或者模块都可以)。由于每一个虚拟元素都存在于内存之中，所以我们必须显式地告诉React，将其渲染到浏览器的DOM之中。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;React.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;http://owenyang0.github.io/img/background.jpg&#39;&lt;/span&gt; /&amp;gt;&lt;/span&gt;, document.body);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;render&lt;/code&gt; 函数接受两个参数，一个是虚拟元素，一个是真实的DOM节点。React就是获取到虚拟元素之后，将其插入到所给的节点之中。此时，在浏览器中便可以看到照片了。&lt;/p&gt;
&lt;h2 id=&quot;u6A21_u5757_28Components_29-1&quot;&gt;&lt;a href=&quot;#u6A21_u5757_28Components_29-1&quot; class=&quot;headerlink&quot; title=&quot;模块(Components)&quot;&gt;&lt;/a&gt;模块(Components)&lt;/h2&gt;&lt;p&gt;模块是React的核心与灵魂。它们可以自定义React元素。经常由单一的功能或者结构扩展而来。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Photo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;http://owenyang0.github.io/img/background.jpg&#39;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;React.render(&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Photo&lt;/span&gt; /&amp;gt;&lt;/span&gt;, document.body);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;createClass&lt;/code&gt; 函数接受一个对象，该对象实现了&lt;code&gt;render&lt;/code&gt; 的函数。&lt;br&gt;这个&lt;code&gt;Photo&lt;/code&gt;模块被构建好，&lt;code&gt;&amp;lt;Photo /&amp;gt;&lt;/code&gt;，然后渲染到document body中。&lt;br&gt;该模块并没有比上一个React图像元素做更多的事情，但这却更加有利于在功能和结构上进行扩展。&lt;/p&gt;
&lt;h2 id=&quot;u5C5E_u6027_28Props_29&quot;&gt;&lt;a href=&quot;#u5C5E_u6027_28Props_29&quot; class=&quot;headerlink&quot; title=&quot;属性(Props)&quot;&gt;&lt;/a&gt;属性(Props)&lt;/h2&gt;&lt;p&gt;属性可以认为是模块的一些配置选项。它们以参数(arguments)的形式传递给模块，看起来就像HTML的属性(attributes)。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Photo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;photo&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&amp;#123;this.props.imageURL&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;this.props.caption&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;React.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Photo&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;imageURL&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;http://owenyang0.github.io/img/background.jpg&#39;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;caption&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;Headset&#39;&lt;/span&gt; /&amp;gt;&lt;/span&gt;, document.body);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;render&lt;/code&gt; 函数里面，两个属性(props)传到了&lt;code&gt;Photo&lt;/code&gt;模块，&lt;code&gt;imageURL&lt;/code&gt; 和 &lt;code&gt;caption&lt;/code&gt;。&lt;code&gt;imageURL&lt;/code&gt;属性被用作React元素中的&lt;code&gt;src&lt;/code&gt;。而&lt;code&gt;caption&lt;/code&gt;属性则以纯文本的方式在React中的span元素使用。&lt;/p&gt;
&lt;p&gt;值得一提的是，模块永远不应该去改变属性的的值，它们是不可变的。如果一个模块有一个可变的数据，那应该应用使用状态对象(state object)。&lt;/p&gt;
&lt;h2 id=&quot;u72B6_u6001_28State_29&quot;&gt;&lt;a href=&quot;#u72B6_u6001_28State_29&quot; class=&quot;headerlink&quot; title=&quot;状态(State)&quot;&gt;&lt;/a&gt;状态(State)&lt;/h2&gt;&lt;p&gt;状态对象是一个模块的内部对象。它会持有可变的数据。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Photo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  toggleLiked: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      liked: !&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.liked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getInitialState: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      liked: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buttonClass = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.liked ? &lt;span class=&quot;string&quot;&gt;&#39;active&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;photo&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&amp;#123;this.props.src&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;bar&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&amp;#123;this.toggleLiked&amp;#125;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&amp;#123;buttonClass&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ♥&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;this.props.caption&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;React.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Photo&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;http://owenyang0.github.io/img/background.jpg&#39;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;caption&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;Headset&#39;&lt;/span&gt;/&amp;gt;&lt;/span&gt;, document.body);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在模块中引入状态，会增加一点点的复杂度。&lt;/p&gt;
&lt;p&gt;在这模块中，有一个新的函数&lt;code&gt;getInitialState&lt;/code&gt;。当模块初始化的时候，React会调用这个函数。而返回的对象则作为React的初始化状态(看函数名就知道)。&lt;br&gt;还有一个新的函数叫&lt;code&gt;toggleLiked&lt;/code&gt;。这个函数调用了模块上的setState方法，可以改变状态&lt;code&gt;liked&lt;/code&gt;的值。&lt;br&gt;通过模块的render函数，变量&lt;code&gt;buttonClass&lt;/code&gt;被赋值成了’active’或者空，这都依赖于&lt;code&gt;liked&lt;/code&gt;状态。&lt;br&gt;&lt;code&gt;buttonClass&lt;/code&gt;是React按钮元素的class名字。按钮还拥有一个&lt;code&gt;onClick&lt;/code&gt;的事件回调，指向&lt;code&gt;toggleLiked&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;当模块渲染成浏览器DOM的时候，究竟发生全过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当按钮点击被触发时，调用了&lt;code&gt;toggleLiked&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;liked&lt;/code&gt;的状态被改变&lt;/li&gt;
&lt;li&gt;React将模块再次渲染成虚拟DOM&lt;/li&gt;
&lt;li&gt;新的虚拟DOM与旧的虚拟DOM相比较&lt;/li&gt;
&lt;li&gt;React将改变的部分隔离，然后更新到浏览器DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这个场景中，React会改变button上的类名。&lt;/p&gt;
&lt;h2 id=&quot;u7EC4_u5408_28Composition_29&quot;&gt;&lt;a href=&quot;#u7EC4_u5408_28Composition_29&quot; class=&quot;headerlink&quot; title=&quot;组合(Composition)&quot;&gt;&lt;/a&gt;组合(Composition)&lt;/h2&gt;&lt;p&gt;组合的意思是说，将小的分散的模块组成一个大的整体。比如&lt;code&gt;Photo&lt;/code&gt;模块可以在&lt;code&gt;PhotoGallery&lt;/code&gt;中使用：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Photo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  toggleLiked: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      liked: !&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.liked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getInitialState: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      liked: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buttonClass = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.liked ? &lt;span class=&quot;string&quot;&gt;&#39;active&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;photo&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&amp;#123;this.props.src&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;bar&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&amp;#123;this.toggleLiked&amp;#125;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&amp;#123;buttonClass&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ♥&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;this.props.caption&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; PhotoGallery = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getDataFromServer: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      url: &lt;span class=&quot;string&quot;&gt;&#39;http://owenyang0.github.io/img/background.jpg&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      caption: &lt;span class=&quot;string&quot;&gt;&#39;Headset&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      url: &lt;span class=&quot;string&quot;&gt;&#39;http://owenyang0.github.io/images/mocha.png&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      caption: &lt;span class=&quot;string&quot;&gt;&#39;Mocha&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      url: &lt;span class=&quot;string&quot;&gt;&#39;http://owenyang0.github.io/images/catalog.png&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      caption: &lt;span class=&quot;string&quot;&gt;&#39;Catelog&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getDataFromServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; photos = data.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;photo&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Photo&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&amp;#123;photo.url&amp;#125;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;caption&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&amp;#123;photo.caption&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;photo-gallery&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;photos&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;React.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;PhotoGallery&lt;/span&gt; /&amp;gt;&lt;/span&gt;, document.body);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个&lt;code&gt;Photo&lt;/code&gt;模块完完全全和上面的一样。但新的&lt;code&gt;PhotoGallery&lt;/code&gt;模块会生成&lt;code&gt;Photo&lt;/code&gt;模块。该场景中，伪造了返回包含三个对象的数组的数据，每一个对象都返回一个url和其标题。通过循环，生成了三个&lt;code&gt;Photo&lt;/code&gt;的模块，将最终的返回值插入到&lt;code&gt;render&lt;/code&gt;函数之中。&lt;/p&gt;
&lt;h2 id=&quot;u5C0F_u7ED3&quot;&gt;&lt;a href=&quot;#u5C0F_u7ED3&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;用React来构建你的用户界面，我想这也差不多了。React的文档手册，包含了所有的细节。强烈推荐大家去读一下。&lt;br&gt;同样的，该文也没有涉及你本地环境安装的细节。&lt;a href=&quot;http://facebook.github.io/react/docs/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;都会有的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;怎样用React JS构建一个用户界面？本文将快速地给你一个React JS的概览。代码，请君移步&lt;a href=&quot;https://github.com/owenyang0/react-starter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reac
    
    </summary>
    
    
      <category term="Facebook" scheme="http://owenyang0.github.io/tags/Facebook/"/>
    
      <category term="JS" scheme="http://owenyang0.github.io/tags/JS/"/>
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="http://owenyang0.github.io/tags/React/"/>
    
      <category term="ReactJS" scheme="http://owenyang0.github.io/tags/ReactJS/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6中的数组操作方法</title>
    <link href="http://owenyang0.github.io/2015/01/04/ECMAScript-6%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>http://owenyang0.github.io/2015/01/04/ECMAScript-6中的数组操作方法/</id>
    <published>2015-01-04T14:20:25.000Z</published>
    <updated>2015-01-05T12:34:34.000Z</updated>
    
    <content type="html">&lt;p&gt;本文介绍ECMAScript 6即将带给我们新的数组操作方法，以及在怎样在现有浏览器应用这些新的数组特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 我将使用交替使用构造器(constructor)和类(class)两个术语。&lt;/p&gt;
&lt;h2 id=&quot;u7C7B_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u7C7B_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;类方法&quot;&gt;&lt;/a&gt;类方法&lt;/h2&gt;&lt;p&gt;数组(Array)自身所拥有的方法。&lt;/p&gt;
&lt;h3 id=&quot;Array-from_28arrayLike_2C_mapFunc_3F_2C_thisArg_3F_29&quot;&gt;&lt;a href=&quot;#Array-from_28arrayLike_2C_mapFunc_3F_2C_thisArg_3F_29&quot; class=&quot;headerlink&quot; title=&quot;Array.from(arrayLike, mapFunc?, thisArg?)&quot;&gt;&lt;/a&gt;Array.from(arrayLike, mapFunc?, thisArg?)&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Array.from()&lt;/code&gt;的基本功能是，转换两种类型的对象成数组。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;类数组对象(Array-like objects)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该类对象有长度与索引的属性。DOM操作符的结果即属于该类，如&lt;code&gt;document.getElementsByClassName()&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;可迭代对象(Iterable objects)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这类对象在取值时，每次只能取一个元素。数组是可迭代的，就如ECMAScript中新的数组结构，映射(Map)和集(Set)。&lt;/p&gt;
&lt;p&gt;以下代码是一个转换类数组对象到数组的一个示例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; lis = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;ul.fancy li&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(lis).forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;li&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;querySelectorAll()&lt;/code&gt;的结果不是一个数组，也不会有&lt;code&gt;forEach()&lt;/code&gt;这个方法。这是我们需要在使用这个方法之前，将它转换成数组的原因。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过Array.from()使用Mapping&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Array.from()&lt;/code&gt;同样也是一个泛型使用&lt;code&gt;map()&lt;/code&gt;的替代选择。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; spans = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;span.name&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// map(), generically:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; names1 = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.map.call(spans, s =&amp;gt; s.textContent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Array.from():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; names2 = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(spans, s =&amp;gt; s.textContent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两个方法中的第二个参数，都是箭头函数(arrow function)。&lt;br&gt;在这个示例中，&lt;code&gt;document.querySelectorAll()&lt;/code&gt;的结果又是一个类数组对象，而非数组。这就是我们不能直接调用&lt;code&gt;map()&lt;/code&gt;的原因。第一个示例中，为了使用&lt;code&gt;forEach()&lt;/code&gt;，我们将类数组对象转换成了数组。这里我们通过泛型方法和两个参数版本的&lt;code&gt;Array.from()&lt;/code&gt;，而省去了中间步骤。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Holes&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Array.from()&lt;/code&gt;会忽略数组里缺失的元素 - 洞(holes)，它会以未定义的元素(undefined elements)进行对待。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就意味着，你可以使用&lt;code&gt;Array.from()&lt;/code&gt;来创建或者填充一个数组：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;), () =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;), (x,i) =&amp;gt; i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想用一个固定的值去填充一个数组，那么&lt;code&gt;Array.prototype.fill()&lt;/code&gt;(请看下文)将是一个更好的选择。第一个即是以上示例的两种方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在数组(Array)子类中的from()&lt;/strong&gt;&lt;br&gt;另一个&lt;code&gt;Array.from()&lt;/code&gt;的使用场景是，转换类数组对象或可迭代对象到一个数组(Array)子类的一个实例。如你创建了一个Array的子类MyArray，想将此类对象转化成MyArray的一个实例，你就可以简单地使用&lt;code&gt;MyArray.from()&lt;/code&gt;。可以这样使用的原因是，在ECMAScript 6中构造器(constructors)会继承下去(父类构造器是它子类构造器的原型(prototype))。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyArray&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Array&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; instanceOfMyArray = MyArray.from(anIterable);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以将该功能与映射(mapping)结合起来，在一个你控制结果构造器的地方完成映射操作(map operation)：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// from() – determine the result’s constructor via the receiver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// (in this case, MyArray)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; instanceOfMyArray = MyArray.from([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], x =&amp;gt; x * x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// map(): the result is always an instance of Array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; instanceOfArray   = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].map(x =&amp;gt; x * x);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Array-of_28_u2026items_29&quot;&gt;&lt;a href=&quot;#Array-of_28_u2026items_29&quot; class=&quot;headerlink&quot; title=&quot;Array.of(…items)&quot;&gt;&lt;/a&gt;Array.of(…items)&lt;/h3&gt;&lt;p&gt;如果你想将一组值转换成一个数组，你应该使用数组源文本(array literal)。特别是只有一个值且还是数字的时候，数组的构造器便罢工了。更多&lt;a href=&quot;http://speakingjs.com/es5/ch18.html#array_constructor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;信息&lt;/a&gt;请参考。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ , ,  ,]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;RangeError&lt;/span&gt;: Invalid array length&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;便如果要将一组值转换成数字子构造器(sub-constructor)的一个实例，我们应该怎么做呢？这就是&lt;code&gt;Array.of()&lt;/code&gt;存在的价值(记住，数组子构造器会继承所有的数组方法，当然也包括&lt;code&gt;of()&lt;/code&gt;)。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyArray&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Array&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(MyArray.of(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MyArray); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(MyArray.of(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).length === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把值包裹嵌套在数组里，&lt;code&gt;Array.of()&lt;/code&gt;会相当方便，而不会有&lt;code&gt;Array()&lt;/code&gt;一样怪异的处理方式。但也要注意&lt;code&gt;Array.prototype.map()&lt;/code&gt;，此处有坑：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;].map(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.of)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ [ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, [ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; ] ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; ] ] ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;].map(x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.of(x)) &lt;span class=&quot;comment&quot;&gt;// better&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ [ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; ], [ &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; ] ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;].map(x =&amp;gt; [x]) &lt;span class=&quot;comment&quot;&gt;// best (in this case)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ [ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; ], [ &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; ] ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如你所看，&lt;code&gt;map()&lt;/code&gt;会传递三个参数到它的回调里面。最后两个又是经常被忽略的(&lt;a href=&quot;http://speakingjs.com/es5/ch15.html#_pitfall_unexpected_optional_parameters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详细&lt;/a&gt;)。&lt;/p&gt;
&lt;h2 id=&quot;u539F_u578B_u65B9_u6CD5_28Prototype_methods_29&quot;&gt;&lt;a href=&quot;#u539F_u578B_u65B9_u6CD5_28Prototype_methods_29&quot; class=&quot;headerlink&quot; title=&quot;原型方法(Prototype methods)&quot;&gt;&lt;/a&gt;原型方法(Prototype methods)&lt;/h2&gt;&lt;p&gt;数组的实例会有很多新的方法可用。&lt;/p&gt;
&lt;h3 id=&quot;u6570_u7EC4_u91CC_u7684_u8FED_u4EE3_28Iterating_over_arrays_29&quot;&gt;&lt;a href=&quot;#u6570_u7EC4_u91CC_u7684_u8FED_u4EE3_28Iterating_over_arrays_29&quot; class=&quot;headerlink&quot; title=&quot;数组里的迭代(Iterating over arrays)&quot;&gt;&lt;/a&gt;数组里的迭代(Iterating over arrays)&lt;/h3&gt;&lt;p&gt;以下的方法，会帮助完成在数组里的迭代：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.entries()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.keys()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.values()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上的每一个方法都会返回一串值，却不会作为一个数组返回。它们会通过迭代器，一个接一个的显示。让我们看一个示例(我将使用&lt;code&gt;Array.from()将迭代器的内容放在数组中&lt;/code&gt;)：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from([ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; ].keys())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from([ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; ].values())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from([ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; ].entries())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ [ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt; ] ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以结合&lt;code&gt;entries()&lt;/code&gt;和ECMAScript 6中的&lt;code&gt;for-of&lt;/code&gt;循环，方便地将迭代对象拆解成key-value对：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [index, elem] &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;].entries()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(index, elem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 这段代码已经可以在最新的Firefox浏览器里运行了。t Firefox.&lt;/p&gt;
&lt;h3 id=&quot;u67E5_u627E_u6570_u7EC4_u5143_u7D20&quot;&gt;&lt;a href=&quot;#u67E5_u627E_u6570_u7EC4_u5143_u7D20&quot; class=&quot;headerlink&quot; title=&quot;查找数组元素&quot;&gt;&lt;/a&gt;查找数组元素&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Array.prototype.find(predicate, thisArg?)&lt;/code&gt; 会返回满足回调函数的第一个元素。如果没有任何一个元素满足条件，它会返回&lt;code&gt;undefined&lt;/code&gt;。比如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;].find(x =&amp;gt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;].find(x =&amp;gt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Array.prototype.findIndex(predicate, thisArg?)&lt;/code&gt;&lt;br&gt;会返回满足回调函数的第一个元素的索引。如果找不任何满足的元素，则返回-1。比如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;].findIndex(x =&amp;gt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;].findIndex(x =&amp;gt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两个find*方法都会忽略洞(holes)，即不会关注undefined的元素。回调的完成函数签名是：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;predicate(element, index, array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;通过findIndex()找NaN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;有一个大家所熟知的限制，那就是不能查找NaN。因为它用恒等(===)查找匹配元素：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;].indexOf(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;code&gt;findIndex()&lt;/code&gt;，你就可以使用&lt;code&gt;Object.is()&lt;/code&gt;，这就不会产生这样的问题：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;].findIndex(y =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.is(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;, y))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你同样也可以采用更通用的方式，创建一个帮助函数&lt;code&gt;elemIs()&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;elemIs&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.is.bind(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;, x) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;].findIndex(elemIs(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Array-prototype-fill_28value_2C_start_3F_2C_end_3F_29&quot;&gt;&lt;a href=&quot;#Array-prototype-fill_28value_2C_start_3F_2C_end_3F_29&quot; class=&quot;headerlink&quot; title=&quot;Array.prototype.fill(value, start?, end?)&quot;&gt;&lt;/a&gt;Array.prototype.fill(value, start?, end?)&lt;/h3&gt;&lt;p&gt;用所给的数值，填充一个数组：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;].fill(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;洞(Holes)也不会有任何的特殊对待：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).fill(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以限制你填充的起始与结束：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;].fill(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;u4EC0_u4E48_u65F6_u5019_u53EF_u4EE5_u4F7F_u7528_u65B0_u7684_u6570_u7EC4_u65B9_u6CD5_uFF1F&quot;&gt;&lt;a href=&quot;#u4EC0_u4E48_u65F6_u5019_u53EF_u4EE5_u4F7F_u7528_u65B0_u7684_u6570_u7EC4_u65B9_u6CD5_uFF1F&quot; class=&quot;headerlink&quot; title=&quot;什么时候可以使用新的数组方法？&quot;&gt;&lt;/a&gt;什么时候可以使用新的数组方法？&lt;/h2&gt;&lt;p&gt;有一些方法已经可以在浏览器里使用了。通过，你可以通过kangax查看兼容性&lt;a href=&quot;http://kangax.github.io/compat-table/es6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6 compatibility table&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Paul Miller的 &lt;a href=&quot;https://github.com/paulmillr/es6-shim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;es6-shim&lt;/a&gt;库可以将ES6转换成ES5。&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003&quot;&gt;&lt;a href=&quot;#u53C2_u8003&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2014/05/es6-array-methods.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.2ality.com/2014/05/es6-array-methods.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://speakingjs.com/es5/ch18.html#array_holes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Holes in Arrays&lt;/a&gt; (Speaking JavaScript)&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍ECMAScript 6即将带给我们新的数组操作方法，以及在怎样在现有浏览器应用这些新的数组特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 我将使用交替使用构造器(constructor)和类(class)两个术语。&lt;/p&gt;
&lt;h2 id=&quot;u7
    
    </summary>
    
    
      <category term="Array" scheme="http://owenyang0.github.io/tags/Array/"/>
    
      <category term="ECMAScript 6" scheme="http://owenyang0.github.io/tags/ECMAScript-6/"/>
    
      <category term="ES6" scheme="http://owenyang0.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu上的Git Server</title>
    <link href="http://owenyang0.github.io/2014/12/24/Ubuntu%E4%B8%8A%E7%9A%84Git-Server/"/>
    <id>http://owenyang0.github.io/2014/12/24/Ubuntu上的Git-Server/</id>
    <published>2014-12-24T12:48:00.000Z</published>
    <updated>2014-12-28T14:08:42.000Z</updated>
    
    <content type="html">&lt;p&gt;Git是一个开源的版本控制系统，由Linus Torvalds主导，用于支持Linux内核开发。每一个Git工作目录，都是一个完整的代码库，包含所有的提交历史。有能力跟踪所有的代码版本，而不会去依赖于网络与中央服务器。&lt;/p&gt;
&lt;h3 id=&quot;u5B89_u88C5&quot;&gt;&lt;a href=&quot;#u5B89_u88C5&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;Git可以通过以下的命令进行安装&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;u914D_u7F6E&quot;&gt;&lt;a href=&quot;#u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;每一个git的用户，在第一次使用的时候都需要通过以下两个命令，进行相应的配置&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;you@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u57FA_u672C_u7528_u6CD5&quot;&gt;&lt;a href=&quot;#u57FA_u672C_u7528_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;p&gt;假设用户可以通过SSH的方式访问Server，对于用户想以分布式以及安全的方式使用Git，则已经完全足够了。在服务器端，创建一个新的仓库。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init --bare /path/to/repository&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这会创建一个裸仓库，它不允许我们直接编辑相应的文件。如果你需要在服务器端保留仓库内容的复本，去掉 –bare 选项就好了。&lt;/p&gt;
&lt;p&gt;任何具有SSH权限的客户端，均可以克隆相应的仓库&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone username@hostname:/path/to/repository&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一旦克隆到了客户端上，用户即可编辑相应的文件，然后提交得分享相应的代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /path/to/repository # &amp;#36827;&amp;#20837;&amp;#30446;&amp;#24405;&amp;#65292;&amp;#32534;&amp;#36753;&amp;#10;git commit -a # &amp;#25552;&amp;#20132;&amp;#25152;&amp;#26377;&amp;#20462;&amp;#25913;&amp;#21040;&amp;#26412;&amp;#22320;&amp;#20179;&amp;#24211;&amp;#10;git push origin master # &amp;#25512;&amp;#36865;&amp;#20462;&amp;#25913;&amp;#21040;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#31471;&amp;#30340;&amp;#20179;&amp;#24211;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;u5B89_u88C5_gitolite_server&quot;&gt;&lt;a href=&quot;#u5B89_u88C5_gitolite_server&quot; class=&quot;headerlink&quot; title=&quot;安装 gitolite server&quot;&gt;&lt;/a&gt;安装 gitolite server&lt;/h3&gt;&lt;p&gt;虽然以上的那些，对于创建，克隆和修改仓库已经足够。但用户在服务器端安装git，最主要是想要一个传统的源代码控制管理服务器，具有多用户与权限管理的功能。推荐的解决方案是通过以下命令，安装 gitolite server：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install gitolite&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;u914D_u7F6E_gitolite&quot;&gt;&lt;a href=&quot;#u914D_u7F6E_gitolite&quot; class=&quot;headerlink&quot; title=&quot;配置 gitolite&quot;&gt;&lt;/a&gt;配置 gitolite&lt;/h3&gt;&lt;p&gt;相比于大多数的类Unix系统，gitolite server的配置有一些小小的区别。传统的配置文件会存放在 /etc 的目录之下，而gitolite则把自己的配置文件放在一个git的仓库之中。配置一个新的gitolite的第一步，则需要有配置仓库的访问权限。&lt;br&gt;首先，让我们为gitolite创建一个用户，并具体其访问权限。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo adduser --system --shell /bin/bash --group --disabled-password --home /home/git git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在我们想让gitolite知晓仓库管理员的SSH公钥。我们假设当前用户是仓库的管理员。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cp ~/.ssh/id_rsa.pub /tmp/$(whoami).pub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们切换到git用户，并将管理员的公钥导入gitolite。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo su - git&amp;#10;gl-setup /tmp/*.pub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Gitolite会允许在安装过程中，对配置文件做一些初期的修改。你现在可以通过管理员用户(即拥有管理员公钥的帐户)，克隆和修改gitolite的配置仓库。切回到管理员账号，克隆配置仓库：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;exit&amp;#10;git clone git@$IP_ADDRESS:gitolite-admin.git&amp;#10;cd gitolite-admin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;gitolite-admin目录包含两个子目录，conf 和 keydir。配置文件存放在 conf目录，而keydir目录存放了用户的公钥信息。&lt;/p&gt;
&lt;h3 id=&quot;u7BA1_u7406gitolite_u5E10_u6237_u548C_u4ED3_u5E93&quot;&gt;&lt;a href=&quot;#u7BA1_u7406gitolite_u5E10_u6237_u548C_u4ED3_u5E93&quot; class=&quot;headerlink&quot; title=&quot;管理gitolite帐户和仓库&quot;&gt;&lt;/a&gt;管理gitolite帐户和仓库&lt;/h3&gt;&lt;p&gt;添加一个新的帐户到gitolite很简单：只需要获取用户的SSH公钥信息，以$DESIRED_USER_NAME.pub 的形式放在keydir目录之下即可。值得注意的是，gitolite的用户名不必和系统的用户名相匹配，它们仅仅是用在gitolite的配置文件之中，管理其访问权限的。同样的，删除用户只需要删除其对应的公钥文件即可。所有修改完毕之后，别忘了提交相应的修改，然后通过以下命令推回服务器端：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit -a&amp;#10;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;仓库是需要编辑conf/gitolite.conf文件进行管理。通过空格分割，遵守相应的权限规则，指定相应的仓库即可。以下是一些默认的示例。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repo    gitolite-admin&amp;#10;        RW+     =   admin&amp;#10;        R       =   alice&amp;#10;repo    project1&amp;#10;        RW+     =   alice&amp;#10;        RW      =   bob&amp;#10;        R       =   denise&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u4F7F_u7528_u670D_u52A1_u5668&quot;&gt;&lt;a href=&quot;#u4F7F_u7528_u670D_u52A1_u5668&quot; class=&quot;headerlink&quot; title=&quot;使用服务器&quot;&gt;&lt;/a&gt;使用服务器&lt;/h3&gt;&lt;p&gt;要使用新创建的帐户，用户需要gitolite的管理员将其公钥导入到gitolite的配置仓库之中。然后，用户即可拥有相应的项目权限：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git@$SERVER_IP:$PROJECT_NAME.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者为一个已存在的git仓库添加一个远程地址：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote add gitolite git@$SERVER_IP:$PROJECT_NAME.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如此便搭好了一个简易的，可用的git server。为了更好的查看相应的代码，或者管理，也可使用相对较重的，gitlab开源项目。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Git是一个开源的版本控制系统，由Linus Torvalds主导，用于支持Linux内核开发。每一个Git工作目录，都是一个完整的代码库，包含所有的提交历史。有能力跟踪所有的代码版本，而不会去依赖于网络与中央服务器。&lt;/p&gt;
&lt;h3 id=&quot;u5B89_u88C5&quot;&gt;&lt;a
    
    </summary>
    
    
      <category term="git" scheme="http://owenyang0.github.io/tags/git/"/>
    
      <category term="git server" scheme="http://owenyang0.github.io/tags/git-server/"/>
    
      <category term="gitolite" scheme="http://owenyang0.github.io/tags/gitolite/"/>
    
      <category term="ubuntu" scheme="http://owenyang0.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>css - position relative与display table-cell深入分析</title>
    <link href="http://owenyang0.github.io/2014/12/14/css-position-relative%E4%B8%8Edisplay-table-cell%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>http://owenyang0.github.io/2014/12/14/css-position-relative与display-table-cell深入分析/</id>
    <published>2014-12-14T07:44:18.000Z</published>
    <updated>2014-12-14T07:49:50.000Z</updated>
    
    <content type="html">&lt;p&gt;在很多时候，想使用 &lt;code&gt;display: table;&lt;/code&gt; 以及其子元素使用 &lt;code&gt;display: table-cell&lt;/code&gt; 都只是为了使用 &lt;code&gt;vertical-align&lt;/code&gt; 这一属性。这是一个很简单的常识，但这次在项目上使用却产生意想不到的表现方式。&lt;/p&gt;
&lt;p&gt;因为我在其中又使用了 &lt;code&gt;position: relative;&lt;/code&gt; 这样一个属性。同样是一个很简单而标准的属性，我想即使放在一起，肯定也是可以正常工作的。可惜，我错了。&lt;/p&gt;
&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;就这样的一个简单的样式场景，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/lists.png&quot; alt=&quot;lists&quot;&gt;&lt;br&gt;&lt;strong&gt;FireFox&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/lists-ff.png&quot; alt=&quot;lists&quot;&gt;&lt;/p&gt;
&lt;p&gt;看着两个图不一样，很难受是吧？开始的时候，即用的是 &lt;code&gt;vertical-align: top;&lt;/code&gt; 使用 &lt;code&gt;position: relative;&lt;/code&gt;去修这样一个位置。因为icon没有 &lt;code&gt;padding&lt;/code&gt;，而文字却是有 &lt;code&gt;line-height&lt;/code&gt; 的。直接使用vertical-align: top; 是不够雅观的，必须往下移大概3个px。我就用position: relative; 去调整了一下(当然，使用 &lt;code&gt;padding-top: 3px;&lt;/code&gt;的话，就没这么多的后话了)。&lt;/p&gt;
&lt;p&gt;做为一个开发者，一般说来都会习惯用Chrome或者FF调试自己的样式。而幸运的是，我用的是Chrome，Chrome对很多东西都支持很好，我用了position: relative; 在Chrome调好了样式。这就导致了在Chrome上很好的东西，到其他浏览器的时候会丑得像一堆X一样。到FF上的时候，发现这些位置根本不工作。&lt;/p&gt;
&lt;h2 id=&quot;u4EE3_u7801&quot;&gt;&lt;a href=&quot;#u4EE3_u7801&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;客户的代码还是就算了，随便写个demo代码吧。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;table&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;cell&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;cell cell-icon&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.table&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hexcolor&quot;&gt;#ccc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.cell&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hexcolor&quot;&gt;#ccc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table-cell&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; top&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.cell-icon&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.cell-icon&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目的只是为了让 &lt;code&gt;top: 20px;&lt;/code&gt; 工作而已，不用去管它现在是否为业务价值。当然，在客户那里是肯定有价值的。经过测试：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WORK：&lt;/strong&gt;&lt;br&gt;Chrome |&lt;br&gt;Safari |&lt;br&gt;IE 8+&lt;/p&gt;
&lt;p&gt;唯FireFox不行，根本不关心你是否有此(position: relative;)属性。&lt;/p&gt;
&lt;h2 id=&quot;u8FC7_u7A0B&quot;&gt;&lt;a href=&quot;#u8FC7_u7A0B&quot; class=&quot;headerlink&quot; title=&quot;过程&quot;&gt;&lt;/a&gt;过程&lt;/h2&gt;&lt;p&gt;遇到这种情况，当然去查找相关资料，最后查到了CSS规范: &lt;a href=&quot;http://www.w3.org/TR/CSS21/visuren.html#choose-position&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;choose-position&lt;/a&gt;。里面有一句:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The effect of ‘position:relative’ on table-row-group, table-header-group, table-footer-group, table-row, table-column-group, table-column, table-cell, and table-caption elements is undefined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大致一意思就是说：&lt;code&gt;position: relative;&lt;/code&gt;在table-cell或者其他table元素下都是不工作的，醒醒吧少年。&lt;/p&gt;
&lt;p&gt;实际的情况是：有些浏览器又允许用户在table-cell里使用绝对或者相对定位(在这里可以看到更多详细信息&lt;a href=&quot;http://www.w3.org/TR/CSS21/visuren.html#comp-abspos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3.org/TR/CSS21/visuren.html#comp-abspos&lt;/a&gt;)。但浏览器又有权不实现那些开发者想要的规范，毕竟这些都不在W3定义的规范里面。&lt;/p&gt;
&lt;p&gt;所以，到这里已经明了了，不是由于FF不给力，而确实是由于规范里面没有这样要求，那么剩下的，我们去寻找真正的解决办法就好了。&lt;/p&gt;
&lt;h2 id=&quot;u89E3_u51B3&quot;&gt;&lt;a href=&quot;#u89E3_u51B3&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;br&gt;以上其实提到过，可以跳过 &lt;code&gt;position: relative;&lt;/code&gt;，直接就用 &lt;code&gt;padding-top: 20px;&lt;/code&gt; 就好了。但这明显不能满足我们的好奇心。所以，请看方法二。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;br&gt;这需要在table-cell里面在包一层，在这层限定这的position就好了。然后，所有浏览器测试一遍，搞定。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;table&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;cell&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;cell&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;cell-icon&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://owenyang0.github.io/Snippets/html/table-cell/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者有人会觉得简单，我觉得不。这些都只是经验型的东西，如果此前没遇到过，或许你会花很长时间去搞明白到底是怎么一回事。这在所有的事情面前都是一样的。&lt;/p&gt;
&lt;p&gt;所以，保持学习，努力填坑。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在很多时候，想使用 &lt;code&gt;display: table;&lt;/code&gt; 以及其子元素使用 &lt;code&gt;display: table-cell&lt;/code&gt; 都只是为了使用 &lt;code&gt;vertical-align&lt;/code&gt; 这一属性。这是一个很简单的常识，但这次在
    
    </summary>
    
    
      <category term="css" scheme="http://owenyang0.github.io/tags/css/"/>
    
      <category term="display" scheme="http://owenyang0.github.io/tags/display/"/>
    
      <category term="position" scheme="http://owenyang0.github.io/tags/position/"/>
    
      <category term="relative" scheme="http://owenyang0.github.io/tags/relative/"/>
    
      <category term="table-cell" scheme="http://owenyang0.github.io/tags/table-cell/"/>
    
  </entry>
  
  <entry>
    <title>AEM - Adobe CMS 扒坑记之始</title>
    <link href="http://owenyang0.github.io/2014/12/13/AEM-Adobe-CMS-%E6%89%92%E5%9D%91%E8%AE%B0%E4%B9%8B%E5%A7%8B/"/>
    <id>http://owenyang0.github.io/2014/12/13/AEM-Adobe-CMS-扒坑记之始/</id>
    <published>2014-12-13T08:02:06.000Z</published>
    <updated>2014-12-13T09:46:05.000Z</updated>
    
    <content type="html">&lt;p&gt;AEM是Adobe公司所出的商业内容管理系统，全称&lt;strong&gt;阿豆比体验管理系统&lt;/strong&gt;(Adobe Experience Manager)，其前身叫&lt;strong&gt;CQ&lt;/strong&gt;，分别有&lt;code&gt;CQ5&lt;/code&gt; &lt;code&gt;CQ6&lt;/code&gt;两个大版本。它提供了整套的网站内容管理系统解决方案，是一个企业级的重型系统。当然，这套系统在中国几乎没什么人知晓。但在澳洲，这系统几乎在所有金融行业遍地开花了。&lt;/p&gt;
&lt;p&gt;基于客户的发展战略，不可避免地开始了&lt;code&gt;AEM&lt;/code&gt;的扒坑之旅。不过，此前一直在扒&lt;code&gt;Drupal&lt;/code&gt;的坑，再扒一堆坑也无关紧要了。&lt;/p&gt;
&lt;h2 id=&quot;AEM__u6280_u672F_u6808&quot;&gt;&lt;a href=&quot;#AEM__u6280_u672F_u6808&quot; class=&quot;headerlink&quot; title=&quot;AEM 技术栈&quot;&gt;&lt;/a&gt;AEM 技术栈&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/cq_technology_stack.png&quot; alt=&quot;stack&quot; title=&quot;cq5 technology stack&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Apache_Sling&quot;&gt;&lt;a href=&quot;#Apache_Sling&quot; class=&quot;headerlink&quot; title=&quot;Apache Sling&quot;&gt;&lt;/a&gt;Apache Sling&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Apache Sling&lt;/code&gt; 是一个以内容为中心的网络框架。其使用Java的内容仓库去存储与管理内容，比如&lt;code&gt;Apache Jackrabbit&lt;/code&gt; 和 &lt;code&gt;CRX&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基于&lt;code&gt;REST&lt;/code&gt;原则，以内容为导向进行开发&lt;/li&gt;
&lt;li&gt;与&lt;code&gt;CQ5&lt;/code&gt;(或者说&lt;code&gt;AEM5, 6&lt;/code&gt;)天然集成&lt;/li&gt;
&lt;li&gt;用于处理&lt;code&gt;HTTP&lt;/code&gt;的渲染与&lt;code&gt;数据存储&lt;/code&gt;的请求。这是一种新的方式，它将在后台将内容组装，渲染最终将其呈现给用户&lt;/li&gt;
&lt;li&gt;能将内容对象与处理数据的组成映射起来&lt;/li&gt;
&lt;li&gt;支持服务端与&lt;code&gt;AJAX&lt;/code&gt;请求&lt;/li&gt;
&lt;li&gt;支持多种脚本语言(比如，JSP, ESP, Ruby等)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;注&lt;/em&gt; &lt;a href=&quot;http://incubator.apache.org/projects/sling.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://incubator.apache.org/projects/sling.html&lt;/a&gt; 查看更多关于&lt;code&gt;Sling&lt;/code&gt;的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;OSGi__28Apache_Felix_29&quot;&gt;&lt;a href=&quot;#OSGi__28Apache_Felix_29&quot; class=&quot;headerlink&quot; title=&quot;OSGi (Apache Felix)&quot;&gt;&lt;/a&gt;OSGi (Apache Felix)&lt;/h3&gt;&lt;p&gt;CQ5 内建了基于&lt;code&gt;OSGI R4 服务平台&lt;/code&gt;(OSGi Service Platform Release 4) 的应用程序框架。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;是一个针对&lt;code&gt;JAVA&lt;/code&gt;的动态模块系统&lt;/li&gt;
&lt;li&gt;发展自通用中间键。很多第三方的组件可以以bundle的形式进行复用&lt;/li&gt;
&lt;li&gt;OSGI的bundle可以包含经编译后的JAVA代码，脚本，或者内容。这些均可根据需要将其加载到相应的仓库，或者对其进行配置等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u83B7_u5F97_u8F6F_u4EF6&quot;&gt;&lt;a href=&quot;#u83B7_u5F97_u8F6F_u4EF6&quot; class=&quot;headerlink&quot; title=&quot;获得软件&quot;&gt;&lt;/a&gt;获得软件&lt;/h2&gt;&lt;p&gt;所有需要的，只是一个可独立执行的jar包。由于是商业软件，License是必须的。我们将其放到一个文件夹下，暂且命名为&lt;code&gt;aem-install&lt;/code&gt;吧。&lt;br&gt;&lt;img src=&quot;/images/aem-dir.png&quot; alt=&quot;aem-dir&quot; title=&quot;AEM directory structure&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于目录下的 &lt;code&gt;crx-quickstart&lt;/code&gt; 是当你启动后，自动生成的。里面包含了，你开发所需要的所有，包含所有的内容，以及配置等等。&lt;/p&gt;
&lt;h3 id=&quot;u51C6_u5907&quot;&gt;&lt;a href=&quot;#u51C6_u5907&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;p&gt;AEM 是一个基于&lt;code&gt;JAVA&lt;/code&gt;跨平台的系统，所以&lt;code&gt;OS X&lt;/code&gt;, &lt;code&gt;桌面版 Windows&lt;/code&gt;, &lt;code&gt;Linux&lt;/code&gt;肯定都可以支持啦。&lt;/p&gt;
&lt;p&gt;唯一需要注意的是，AEM运行在&lt;code&gt;JAVA 7&lt;/code&gt;上。所以如果你是用的&lt;code&gt;JAVA 8&lt;/code&gt;，但却装有&lt;code&gt;JAVA 7&lt;/code&gt;的话，只需要切换一下&lt;code&gt;JAVA_HOME&lt;/code&gt;。将这条命令放在你的 &lt;code&gt;.bashrc&lt;/code&gt; 或者&lt;code&gt;.zshrc&lt;/code&gt; source一下就搞定啦。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export JAVA_HOME=`/usr/libexec/java_home -v 1.7`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;u542F_u52A8&quot;&gt;&lt;a href=&quot;#u542F_u52A8&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h3&gt;&lt;p&gt;好的，一准备工作就绪，那么我们就开始我们的正式启动。比如有趣的是，Adobe提供了两种方法供我们使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. 控制台&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不用说，作为一个职业代码人，我们还是比较喜欢这样的方式的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -Xmx1024M -jar cq-author-p4502.jar -p 4502 -r author&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，以下两个参数是可省的，因为默认的参数就是 &lt;strong&gt;端口 4502&lt;/strong&gt;，&lt;strong&gt;模式 author&lt;/strong&gt;。当然，如果你的电脑足够强大，&lt;strong&gt;-Xmx1024M&lt;/strong&gt; 也是可以省的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;指的是工作端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;指的是启动模式。常见的模式有&lt;code&gt;author&lt;/code&gt; 与 &lt;code&gt;publish&lt;/code&gt;两种。当然还有其他的，用得不多就此略过罢&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2. GUI 双击&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，有时为了方便，也可以直接双击&lt;code&gt;cq-author-p4502.jar&lt;/code&gt;启动。只是有几个需要注意的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认的情况，是以&lt;code&gt;author&lt;/code&gt;模式，启动在&lt;code&gt;localhost:4502&lt;/code&gt;。但我们可以在启动以前，通过修改jar包的名字，达到不同模式不同端口的效果。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cq-&amp;#60;instance-type&amp;#62;-p&amp;#60;port-number&amp;#62;.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比如，修改成&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cq-author-p4502.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动，这就达到了以&lt;code&gt;author&lt;/code&gt;模式启动，端口设置在 &lt;code&gt;4502&lt;/code&gt;的效果。&lt;br&gt;同理，修改成&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cq-publish-p4503.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动，就将以&lt;code&gt;publish&lt;/code&gt;的模式启动，端口是&lt;code&gt;4503&lt;/code&gt;。&lt;br&gt;理想的情况是，你需要同时启动两个&lt;code&gt;instance&lt;/code&gt;，只需要把jar包和license文件放在相应目录下就可以了。如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;aem-install&amp;#62;/author&amp;#10;&amp;#21644;&amp;#10;&amp;#60;aem-install&amp;#62;/publish&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;u5C31_u7EEA&quot;&gt;&lt;a href=&quot;#u5C31_u7EEA&quot; class=&quot;headerlink&quot; title=&quot;就绪&quot;&gt;&lt;/a&gt;就绪&lt;/h3&gt;&lt;p&gt;当AEM启动后，会自动打开浏览器定位到相应的页面。比如，我的是&lt;code&gt;localhost:4502&lt;/code&gt;。以&lt;code&gt;admin:admin&lt;/code&gt;登陆就可以开始正式的开发之路了。&lt;br&gt;&lt;img src=&quot;/images/crx_de.png&quot; alt=&quot;crx-de&quot; title=&quot;crx/de&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;u5C0F_u7ED3&quot;&gt;&lt;a href=&quot;#u5C0F_u7ED3&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;那么就此开始，我们已经扒完了AEM的第一坑了，AEM的填坑之路就正式开始了。接下来几篇，我将着重在开发之上，讲解一下AEM的整个开发流程。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;AEM是Adobe公司所出的商业内容管理系统，全称&lt;strong&gt;阿豆比体验管理系统&lt;/strong&gt;(Adobe Experience Manager)，其前身叫&lt;strong&gt;CQ&lt;/strong&gt;，分别有&lt;code&gt;CQ5&lt;/code&gt; &lt;code&gt;CQ6&lt;/code
    
    </summary>
    
    
      <category term="AEM" scheme="http://owenyang0.github.io/tags/AEM/"/>
    
      <category term="Adobe" scheme="http://owenyang0.github.io/tags/Adobe/"/>
    
      <category term="CMS" scheme="http://owenyang0.github.io/tags/CMS/"/>
    
      <category term="Drupal" scheme="http://owenyang0.github.io/tags/Drupal/"/>
    
      <category term="Experience Management" scheme="http://owenyang0.github.io/tags/Experience-Management/"/>
    
  </entry>
  
  <entry>
    <title>Change Tab Title with JavaScript</title>
    <link href="http://owenyang0.github.io/2014/12/11/Change-Tab-Title-with-JavaScript/"/>
    <id>http://owenyang0.github.io/2014/12/11/Change-Tab-Title-with-JavaScript/</id>
    <published>2014-12-11T02:38:11.000Z</published>
    <updated>2014-12-11T02:50:04.000Z</updated>
    
    <content type="html">&lt;p&gt;修改tab或者window的标题，是一项较老的实践。&lt;code&gt;Gmail&lt;/code&gt; 用它来提示用户新的聊天消息，当有新的page通过&lt;code&gt;AJAX&lt;/code&gt;加载的时候，本站同样用它更新&lt;code&gt;tab title&lt;/code&gt;。这是怎样做到的呢？当时是通过设置&lt;code&gt;document&lt;/code&gt;对象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.title = &lt;span class=&quot;string&quot;&gt;&#39;Hello!&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// New title :)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有一个常识性的错误是：你会以为应该去修改 &lt;code&gt;window.title&lt;/code&gt;。但实际上，你应该使用&lt;code&gt;document&lt;/code&gt;对象，否则你做的肯定是无用的。注意一下，你将会看到：很多时候会用 &lt;code&gt;setInterval&lt;/code&gt;来实际更新 &lt;code&gt;document.title&lt;/code&gt;，用以引起用户的注意！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原文：&lt;/strong&gt;&lt;a href=&quot;http://davidwalsh.name/change-title-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Change Tab Title with JavaScript&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;修改tab或者window的标题，是一项较老的实践。&lt;code&gt;Gmail&lt;/code&gt; 用它来提示用户新的聊天消息，当有新的page通过&lt;code&gt;AJAX&lt;/code&gt;加载的时候，本站同样用它更新&lt;code&gt;tab title&lt;/code&gt;。这是怎样做到的呢？当时是通过
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="Tab" scheme="http://owenyang0.github.io/tags/Tab/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript TDD with Mocha</title>
    <link href="http://owenyang0.github.io/2014/12/04/JavaScript-TDD-with-Mocha/"/>
    <id>http://owenyang0.github.io/2014/12/04/JavaScript-TDD-with-Mocha/</id>
    <published>2014-12-03T16:37:41.000Z</published>
    <updated>2014-12-03T16:47:15.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;u5F00_u53D1_u73B0_u72B6&quot;&gt;&lt;a href=&quot;#u5F00_u53D1_u73B0_u72B6&quot; class=&quot;headerlink&quot; title=&quot;开发现状&quot;&gt;&lt;/a&gt;开发现状&lt;/h3&gt;&lt;p&gt;当新的版本快要发布的时候，大家都忙于加班，加紧修复BUG1、BUG2。我想这就是很多公司开发的现状。&lt;br&gt;为了不至于让上线的版本挂掉挂掉，少不了就是 &lt;code&gt;人肉测试&lt;/code&gt;。&lt;br&gt;在一个项目中，我们会做许许多多各种各样的测试，这些测试都必不可少的。测试是项目成功不可或缺的一部分。但 &lt;code&gt;人肉测试&lt;/code&gt; 不在本博的讨论范围。&lt;/p&gt;
&lt;p&gt;测试大体分为以下几类&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;li&gt;集成测试&lt;/li&gt;
&lt;li&gt;功能测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;u6D4B_u8BD5_u9A71_u52A8_u5F00_u53D1&quot;&gt;&lt;a href=&quot;#u6D4B_u8BD5_u9A71_u52A8_u5F00_u53D1&quot; class=&quot;headerlink&quot; title=&quot;测试驱动开发&quot;&gt;&lt;/a&gt;测试驱动开发&lt;/h3&gt;&lt;p&gt;TDD(Test-Driven Development) 从根本上改变了传统的开发模式，它要求你在写代码之前就写好测试，而不仅仅是待你写你代码以后的用作验证的目的。&lt;br&gt;TDD将测试提到了应用设计的阶段，在这期间你应该用你的测试理清你写代码时的思路，我们称作 &lt;code&gt;Tasking&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;以下是TDD开发时的基本要点&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Tasking (将项目需要拆分成小的task)&lt;/li&gt;
&lt;li&gt;Red (写测试代码，让其失败，变红)&lt;/li&gt;
&lt;li&gt;Green (写实现代码，让其通过，变绿)&lt;/li&gt;
&lt;li&gt;Refactor (重构，消失代码中的bad smell)&lt;/li&gt;
&lt;li&gt;Repeat (重复以上步骤)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是TDD开发过程中的基本过程，我们就在 “红-绿-红-绿” 中完成我们的软件开发。&lt;/p&gt;
&lt;h3 id=&quot;JavaScript_TDD&quot;&gt;&lt;a href=&quot;#JavaScript_TDD&quot; class=&quot;headerlink&quot; title=&quot;JavaScript TDD&quot;&gt;&lt;/a&gt;JavaScript TDD&lt;/h3&gt;&lt;p&gt;笔者将通过编写一个传统游戏的方式，来完成一个 JavaScript TDD 的实践。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 digits&lt;/strong&gt;&lt;br&gt;是一个猜数字游戏。在国外称为公牛和母牛，在中国人们就叫它猜数字。游戏的目标是在八次内用尽可能短的时间猜出一个随机的四位数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;顺序与大小都相同的用 A 表示  &lt;/li&gt;
&lt;li&gt;大小相同，但顺序不同用 B 表示&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;比如&lt;/strong&gt; 输入 1234 | 猜数 2156 | 结果 0A2B&lt;/p&gt;
&lt;p&gt;这是曾经在文曲星上有过的游戏，网友做过一个GUI版的，大家可以看下截图：&lt;br&gt;&lt;img src=&quot;/images/digits.png&quot; alt=&quot;4digits&quot;&gt;   &lt;/p&gt;
&lt;p&gt;当然，本文的重点是 JavaScript TDD, 不是去实现一个太过细节逻辑。我们就把需求稍微改写一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;四位数先给定&lt;/li&gt;
&lt;li&gt;仅做算法处理(比较所猜数字与给定数字)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u5F00_u53D1_u51C6_u5907&quot;&gt;&lt;a href=&quot;#u5F00_u53D1_u51C6_u5907&quot; class=&quot;headerlink&quot; title=&quot;开发准备&quot;&gt;&lt;/a&gt;开发准备&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Node  &lt;/li&gt;
&lt;li&gt;Mocha&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果不知道 &lt;code&gt;Node&lt;/code&gt;, 估计你暂时还不用写 &lt;code&gt;JavaScript&lt;/code&gt;。所以，本篇文章可能还不太适合你。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mocha.png&quot; alt=&quot;Mocha&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://visionmedia.github.io/mocha/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;摩卡&lt;/a&gt;是一个功能丰富的运行在 &lt;code&gt;Node&lt;/code&gt; 和浏览器上的JavaScript测试框架。它允许你使用你任意喜欢的断言库。比如&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;should.js&lt;/li&gt;
&lt;li&gt;chai&lt;/li&gt;
&lt;li&gt;expect.js&lt;/li&gt;
&lt;li&gt;better-assert&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;本次工程就选择 &lt;a href=&quot;https://github.com/visionmedia/should.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;should.js&lt;/a&gt;吧，写TDD很优美，下面正式开发我们的TDD之旅。&lt;/p&gt;
&lt;h4 id=&quot;u5DE5_u7A0B_u5EFA_u7ACB&quot;&gt;&lt;a href=&quot;#u5DE5_u7A0B_u5EFA_u7ACB&quot; class=&quot;headerlink&quot; title=&quot;工程建立&quot;&gt;&lt;/a&gt;工程建立&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;mkdir -p digits/{src,test}
cd digits
touch src/digits.js test/digitsSpec.js
npm init
npm install -g mocha
npm install should --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;工程就是这样搭建完成了，我们可以来看一下目录结构(&lt;br&gt;我把node_modules目录隐藏了)：&lt;br&gt;&lt;img src=&quot;/images/catalog.png&quot; alt=&quot;Catalog&quot;&gt;&lt;/p&gt;
&lt;p&gt;就这样，我们就可以直接运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mocha 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;跑测试了。当然，我们什么代码都没有写，当时没有测试可以跑，所以结果会是一个 &lt;code&gt;0 passing&lt;/code&gt;。那我们正式开始吧。&lt;/p&gt;
&lt;h4 id=&quot;u6D4B_u8BD5_u4EE3_u7801_u7F16_u5199&quot;&gt;&lt;a href=&quot;#u6D4B_u8BD5_u4EE3_u7801_u7F16_u5199&quot; class=&quot;headerlink&quot; title=&quot;测试代码编写&quot;&gt;&lt;/a&gt;测试代码编写&lt;/h4&gt;&lt;p&gt;先写出我们的第一个测试用例吧。&lt;br&gt;如果输入数字，或者所给数字的长度都不等于4，则返回-1。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var should = require(&amp;apos;should&amp;apos;),
  Digits = require(&amp;apos;../src/digits&amp;apos;).Digits;

describe(&amp;apos;Digits&amp;apos;, function() {
  // Digits.compare(inputNum, givenNum);
  describe(&amp;apos;#compare()&amp;apos;, function() {
    it(&amp;apos;should return -1 when input and given number length isnt 4&amp;apos;, function() {
      Digits.compare(&amp;apos;123&amp;apos;, &amp;apos;&amp;apos;).should.equal(-1);
      Digits.compare(&amp;apos;123&amp;apos;, null).should.equal(-1);
      Digits.compare(&amp;apos;123&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(-1);
      Digits.compare(null, &amp;apos;1234&amp;apos;).should.equal(-1);
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;嗯，代码看起来不错，我们尝试着 &lt;code&gt;mocha&lt;/code&gt; 跑一下。啊哦，意料之中，变红了：&lt;img src=&quot;/images/mocha_error.png&quot; alt=&quot;mocha error&quot;&gt;&lt;/p&gt;
&lt;p&gt;什么原因喃？原来我们根本没有写实现代码，你这不废话么？确实是这样，这就是TDD中的第一步，&lt;strong&gt;红&lt;/strong&gt;。接下来，我们就编写一些代码，让它变绿吧。&lt;/p&gt;
&lt;h4 id=&quot;u5B9E_u73B0_u4EE3_u7801_u7F16_u5199&quot;&gt;&lt;a href=&quot;#u5B9E_u73B0_u4EE3_u7801_u7F16_u5199&quot; class=&quot;headerlink&quot; title=&quot;实现代码编写&quot;&gt;&lt;/a&gt;实现代码编写&lt;/h4&gt;&lt;p&gt;我们定义一个简单的Digits的function吧，通过 &lt;code&gt;exports.Digits = Digits;&lt;/code&gt; 将函数接口暴露出去。就像这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Digits() {}

Digits.compare = function(inputNum, givenNum) {
  var len = 4;

  if (inputNum === null ||
    givenNum === null ||
    inputNum.length !== len ||
    givenNum.length !== len) {
    return -1;
  }
}

exports.Digits = Digits;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看吧，看起来也很不错的样子，那我们继续跑一下测试吧。啊哈，意料之中，变&lt;strong&gt;绿&lt;/strong&gt;了：&lt;img src=&quot;/images/mocha_success.png&quot; alt=&quot;mocha success&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;repeat&quot;&gt;&lt;a href=&quot;#repeat&quot; class=&quot;headerlink&quot; title=&quot;repeat&quot;&gt;&lt;/a&gt;repeat&lt;/h4&gt;&lt;p&gt;由红变绿之后，这个task也就相当于是完成了。我们又可以按照这样的一个步骤，再写新的测试，然后再将它实现出来。到此为止，一个基本的 JavaScript TDD流程也就完了，趁着热乎劲儿。我们把这个 &lt;code&gt;compare&lt;/code&gt; 函数的其他测试也一并写了吧。代码如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;digitsSepc.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var should = require(&amp;apos;should&amp;apos;),
  Digits = require(&amp;apos;../src/digits&amp;apos;).Digits;

describe(&amp;apos;Digits&amp;apos;, function() {
  // Digits.compare(inputNum, givenNum);
  describe(&amp;apos;#compare()&amp;apos;, function() {
    it(&amp;apos;should return -1 when input and given number length isnt 4&amp;apos;, function() {
      Digits.compare(&amp;apos;123&amp;apos;, &amp;apos;&amp;apos;).should.equal(-1);
      Digits.compare(&amp;apos;123&amp;apos;, null).should.equal(-1);
      Digits.compare(&amp;apos;123&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(-1);
      Digits.compare(null, &amp;apos;1234&amp;apos;).should.equal(-1);
    });

    it(&amp;apos;should return 4A0B when input numbers matched given numbers&amp;apos;, function() {
      Digits.compare(&amp;apos;1234&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(&amp;apos;4A0B&amp;apos;);
      Digits.compare(&amp;apos;5678&amp;apos;, &amp;apos;5678&amp;apos;).should.equal(&amp;apos;4A0B&amp;apos;);
    });

    it(&amp;apos;should return 2A2B when 2 input numbers matched given numbers, and other 2 exist but not the right order&amp;apos;, function() {
      Digits.compare(&amp;apos;2134&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(&amp;apos;2A2B&amp;apos;);
      Digits.compare(&amp;apos;1324&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(&amp;apos;2A2B&amp;apos;);
      Digits.compare(&amp;apos;3214&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(&amp;apos;2A2B&amp;apos;);
      Digits.compare(&amp;apos;4231&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(&amp;apos;2A2B&amp;apos;);
    });

    it(&amp;apos;should return 2A0B when 2 input numbers matched given numbers, and other 2 was wrong numbers&amp;apos;, function() {
      Digits.compare(&amp;apos;1256&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(&amp;apos;2A0B&amp;apos;);
      Digits.compare(&amp;apos;7238&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(&amp;apos;2A0B&amp;apos;);
      Digits.compare(&amp;apos;7834&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(&amp;apos;2A0B&amp;apos;);
      Digits.compare(&amp;apos;1784&amp;apos;, &amp;apos;1234&amp;apos;).should.equal(&amp;apos;2A0B&amp;apos;);
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;digits.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Digits() {}

Digits.compare = function(inputNum, givenNum) {
  var len = 4,
    aCount = 0,
    bCount = 0;

  if (inputNum === null ||
    givenNum === null ||
    inputNum.length !== len ||
    givenNum.length !== len) {
    return -1;
  }

  if (inputNum === givenNum) {
    return &amp;apos;4A0B&amp;apos;;
  }

  for (var i = 0; i &amp;lt; len; i++) {
    if (inputNum[i] === givenNum[i]) {
      aCount++;
    } else if (givenNum.indexOf(inputNum[i]) !== -1) {
      bCount++;
    }
  }

  return aCount + &amp;apos;A&amp;apos; + bCount + &amp;apos;B&amp;apos;;
}

exports.Digits = Digits;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后再来跑一遍 &lt;code&gt;mocha -R spec&lt;/code&gt;，结果如下(大功告成啦)：&lt;img src=&quot;/images/mocha_successes.png&quot; alt=&quot;mocha successes&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;u7ED3_u8BED&quot;&gt;&lt;a href=&quot;#u7ED3_u8BED&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;大功告成了，此时的你其实可以洗洗睡了，不用再担心你的程序有问题啦。你的测试告诉你，你的程序都是绿色可行的。当然，如果你测试写有的问题就别当别说咯。&lt;br&gt;测试代码会有一些什么好处呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;测试代码在那里，可以保证你以后修改代码时，或者重构时不会对已有的功能产生影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这条是很重要的，也是相当重要的。如果没有测试代码的保证，你无从知道你自己所改的代码，对已有的代码会产生什么样的影响。与其每次上线时都得加班改BUG，为啥不先写好测试，上线时早些洗洗睡了呢？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;u5F00_u53D1_u73B0_u72B6&quot;&gt;&lt;a href=&quot;#u5F00_u53D1_u73B0_u72B6&quot; class=&quot;headerlink&quot; title=&quot;开发现状&quot;&gt;&lt;/a&gt;开发现状&lt;/h3&gt;&lt;p&gt;当新的版本快要发布的时候，大家都忙于加班，加紧修
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="Mocha" scheme="http://owenyang0.github.io/tags/Mocha/"/>
    
      <category term="TDD" scheme="http://owenyang0.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JavaScript闭包</title>
    <link href="http://owenyang0.github.io/2014/03/02/%E6%B5%85%E8%B0%88JavaScript%E9%97%AD%E5%8C%85/"/>
    <id>http://owenyang0.github.io/2014/03/02/浅谈JavaScript闭包/</id>
    <published>2014-03-02T15:25:00.000Z</published>
    <updated>2014-12-27T15:55:24.000Z</updated>
    
    <content type="html">&lt;p&gt;JavaScript函数是将要执行的&lt;strong&gt;代码&lt;/strong&gt;及执行这些代码的&lt;strong&gt;作用域&lt;/strong&gt;构成的一个综合体。计算机术语称这种代码和作用域的综合体为&lt;strong&gt;闭包&lt;/strong&gt;。故所有JavaScript函数都是闭包。但我们常说的JavaScript闭包是指，一个嵌套函数被导出到它所定义的作用域外时，才明确地称为&lt;strong&gt;闭包&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;JavaScript_u95ED_u5305&quot;&gt;&lt;a href=&quot;#JavaScript_u95ED_u5305&quot; class=&quot;headerlink&quot; title=&quot;JavaScript闭包&quot;&gt;&lt;/a&gt;JavaScript闭包&lt;/h2&gt;&lt;p&gt;闭包是 &lt;code&gt;JavaScript&lt;/code&gt; 一个非常重要的特性，这意味着当前作用域总是能够访问外部作用域中的变量。 因为&lt;strong&gt;函数&lt;/strong&gt;是 &lt;code&gt;JavaScript&lt;/code&gt; 中唯一拥有自身作用域的结构，因此闭包的创建&lt;strong&gt;依赖于&lt;/strong&gt;函数。&lt;/p&gt;
&lt;h2 id=&quot;u7B80_u5355_u5199_u6CD5&quot;&gt;&lt;a href=&quot;#u7B80_u5355_u5199_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;简单写法&quot;&gt;&lt;/a&gt;简单写法&lt;/h2&gt;&lt;p&gt;该函数的私有持久变量，可以被多个函数共享&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var uniqueID = (function() {
    // 私有持久值
    var id = 0;
    return function() {
        return id++;
    }
})();
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;u5FAA_u73AF_u4E2D_u7684_u95ED_u5305&quot;&gt;&lt;a href=&quot;#u5FAA_u73AF_u4E2D_u7684_u95ED_u5305&quot; class=&quot;headerlink&quot; title=&quot;循环中的闭包&quot;&gt;&lt;/a&gt;循环中的闭包&lt;/h2&gt;&lt;p&gt;一个常见的错误出现在&lt;strong&gt;循环&lt;/strong&gt;中使用闭包，开发人员在循环语句里创建函数（内部计数）时经常得不到预期的结果，假设我们需要在每次循环中调用循环&lt;strong&gt;序号&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(var i = 0; i &amp;lt; 10; i++) {
    setTimeout(function() {
        console.log(i);  
    }, 1000);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所输入的内容不是 &lt;code&gt;0-9&lt;/code&gt;，取而代之的是打印10次 &lt;code&gt;10&lt;/code&gt;。&lt;br&gt;关键原因，在调用&lt;code&gt;console.log(i)&lt;/code&gt;时，循环已经结束，同一个上下文中创建的闭包是共用一个[[Scope]]属性，导致&lt;strong&gt;i&lt;/strong&gt;已经被修改成了&lt;code&gt;10&lt;/code&gt;。&lt;br&gt;在ECMAScript中，同一个父上下文中创建的闭包是共用一个&lt;code&gt;[[Scope]]&lt;/code&gt;属性的。也就是说，某个闭包对其中[[Scope]]的变量做修改会影响到其他闭包对其变量的读取。&lt;/p&gt;
&lt;h2 id=&quot;u89E3_u51B3_u65B9_u5F0F&quot;&gt;&lt;a href=&quot;#u89E3_u51B3_u65B9_u5F0F&quot; class=&quot;headerlink&quot; title=&quot;解决方式&quot;&gt;&lt;/a&gt;解决方式&lt;/h2&gt;&lt;p&gt;避免引用错误，获取正确序号。我们需要引入自执行函数，包裹一下。传入就是&lt;code&gt;i&lt;/code&gt;的拷贝，这样就能获取正确的输出。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(var i = 0; i &amp;lt; 10; i++) {
    (function(e) {
        setTimeout(function() {
            console.log(e);  
        }, 1000);
    })(i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将&lt;code&gt;setTimeout&lt;/code&gt;包裹在一个匿名函数中，匿名函数拥有变量&lt;code&gt;e&lt;/code&gt;的引用，便不用被循环改变了。   &lt;/p&gt;
&lt;h2 id=&quot;u4F7F_u7528_u95ED_u5305_u7684_u65AD_u70B9&quot;&gt;&lt;a href=&quot;#u4F7F_u7528_u95ED_u5305_u7684_u65AD_u70B9&quot; class=&quot;headerlink&quot; title=&quot;使用闭包的断点&quot;&gt;&lt;/a&gt;使用闭包的断点&lt;/h2&gt;&lt;p&gt;在此贴上《JavaScript权威指南》中，使用&lt;code&gt;闭包的断点&lt;/code&gt;代码。由&lt;code&gt;Steve Yen&lt;/code&gt;所写，用来捕获一个函数中的当前作用域（包括局部变量和函数的参数），并返回其结果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function inspect(inspector, title) {
  var expression, result;
  if(&amp;quot;ignore&amp;quot; in arguments.callee) {
    return;
  }

  while(true) {
    var message = &amp;quot;&amp;quot;;
    if(title) {
      message = title + &amp;quot;\n&amp;quot;;
    }

    if(expression) {
      message += &amp;quot;\n&amp;quot; + expression + &amp;quot; ==&amp;gt; &amp;quot; + result + &amp;quot;\n&amp;quot;;
    } else {
      expression = &amp;quot;&amp;quot;;
    }

    expression += &amp;quot;Enter an expression to evaluate:&amp;quot;;
    expression = prompt(message, expression);

    if(!expression) {
      return;
    }

    result = inspector(expression);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;u7528_u65AD_u70B9_u6280_u672F_u8BA1_u7B97_u9636_u4E58_u7684_u51FD_u6570&quot;&gt;&lt;a href=&quot;#u7528_u65AD_u70B9_u6280_u672F_u8BA1_u7B97_u9636_u4E58_u7684_u51FD_u6570&quot; class=&quot;headerlink&quot; title=&quot;用断点技术计算阶乘的函数&quot;&gt;&lt;/a&gt;用断点技术计算阶乘的函数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;function factorial(n) {
  var inspector = function($) {
    return eval($);
  }

  // inspect.ignore = true;
  inspect(inspector, &amp;quot;Entering factorial()&amp;quot;);

  var result = 1;
  while(n &amp;gt; 1) {
    result *= n;
    n--;
    inspect(inspector, &amp;quot;factorial() loop&amp;quot;);
  }

  inspect(inspector, &amp;quot;Exiting factorial()&amp;quot;);
  return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;u53C2_u8003&quot;&gt;&lt;a href=&quot;#u53C2_u8003&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.cn/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E5%BC%97%E6%8B%89%E7%BA%B3%E6%A0%B9/dp/B0012UMVYA/ref=sr_1_2?ie=UTF8&amp;amp;qid=1393770256&amp;amp;sr=8-2&amp;amp;keywords=javascript+%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript权威指南&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bonsaiden.github.io/JavaScript-Garden/zh/#function.closures&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Closure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript函数是将要执行的&lt;strong&gt;代码&lt;/strong&gt;及执行这些代码的&lt;strong&gt;作用域&lt;/strong&gt;构成的一个综合体。计算机术语称这种代码和作用域的综合体为&lt;strong&gt;闭包&lt;/strong&gt;。故所有JavaScript函数都是闭包。但我们常
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="closure" scheme="http://owenyang0.github.io/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>实习那几月</title>
    <link href="http://owenyang0.github.io/2014/02/17/%E5%AE%9E%E4%B9%A0%E9%82%A3%E5%87%A0%E6%9C%88/"/>
    <id>http://owenyang0.github.io/2014/02/17/实习那几月/</id>
    <published>2014-02-17T14:00:00.000Z</published>
    <updated>2014-12-21T08:12:56.000Z</updated>
    
    <content type="html">&lt;p&gt;###题外&lt;br&gt;自&lt;strong&gt;新蛋实习&lt;/strong&gt;至今，也有三个多月了吧。回想起那天面试的时候，还有些许的紧张，或许是自己知道的太少，或者是自己想表达的太多。反正初出茅庐的样子，让南哥见笑了好久（我猜的）。&lt;/p&gt;
&lt;p&gt;###题前&lt;/p&gt;
&lt;p&gt;新蛋算得上是我人生去的第一家公司吧，走出了学校那座象牙塔，才明白世界是如此的广阔——以至于自己在最初时，会有自己该有的迷茫。&lt;br&gt;今天突然有种想写一写的冲动，也不知道是写给自己，还是写给未来的自己。权当自己人生过往的一点印记，当自己未来的一种回首！&lt;/p&gt;
&lt;p&gt;###题中&lt;/p&gt;
&lt;p&gt;没错，我就是传说中的那个&lt;strong&gt;程序猿&lt;/strong&gt;，起早而贪黑，半夜却又不想眠。不太方便形容，我此时的状态，是无法形容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只能说：&lt;/strong&gt; 仅仅只是自我感受罢了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这三个月看的书，差不多比得上以前的半年&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不论是技术书籍，抑或是其他类的书籍，总感觉看书才是和世界沟通的最好方式之一。如果，各位有机会&amp;gt; 看到这篇不算博文的文章的话，建议大都去看看&lt;code&gt;遇见未知的自己&lt;/code&gt;一本沉淀心灵的大作，在这个浮躁的社会，能静下心来是多么的难得&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;接触的越多，无知便越多&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接触的项目不必太多，一两个足矣。如果自己真的把自己投入进去，才会发现原来真理的环境和象牙塔里的世界，是如此的不同。&lt;br&gt;IT人的技术是层出不穷，想必大家都了解。技术日新月异，追求新事物的脚步不止，深入某方面研究不悉，此乃上乘之道。&lt;/p&gt;
&lt;p&gt;三个多月中，用到的主要技术是 &lt;code&gt;AngularJs&lt;/code&gt; &lt;code&gt;jQuery&lt;/code&gt; &lt;code&gt;NodeJs&lt;/code&gt;。一切都是从新开始，所以很多公司看重&lt;strong&gt;学习能力&lt;/strong&gt;还是有那么一点道理。但学习的尝试，和代码的整洁度与可阅读度，就取决于自己的积累了。对于自己的问题，还是只有自己清楚。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;AngularJS&lt;/code&gt; 和 &lt;code&gt;jQuery&lt;/code&gt; 一起使用的时候，会出现一些问题&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自己纠结最终证明都是不明志的，学会查看官方的文档，学会 &lt;code&gt;google&lt;/code&gt; &lt;code&gt;StackOverflow&lt;/code&gt; 才是一个程序猿所必须的。&lt;br&gt;典型的问题，&lt;code&gt;AngularJs&lt;/code&gt; 和 &lt;code&gt;jQuery&lt;/code&gt; 同时更新 &lt;code&gt;DOM&lt;/code&gt; 时，绝大多数都会出错：由于两边同时调用 &lt;code&gt;apply&lt;/code&gt; 方法时出错—— &lt;code&gt;apply&lt;/code&gt; 方法能劫持另外一个对象的方法，继承另外一个对象的属性。可以采用timeout的方式，让避免问题的出现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;设计好数据结构，永远都不会错&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个项目刚刚开始时，就要设计好主要数据的结构，否则到后期的时候，你将是苦不堪言。增增补补，修修改改，最后可能自己都对自己写的东西看不下去。因为那时，项目已经不能称之为项目了，是一个典型的垃圾补丁囤积场。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写好测试代码&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多人很可能都对 &lt;code&gt;TDD&lt;/code&gt; 不屑一顾，认为那纯粹的是浪费时间。诚言，有些东西是不可测试的，但必须的测试单元还是需要的。&lt;br&gt;多数时候，回归 &lt;code&gt;BUG&lt;/code&gt; 再现的时候，自己都不会注意所写的代码。当你改代码的时候，没有一个必须的东西来保证，你所修改的部分对其他部分不会产生影响，就算你相当的自信。&lt;/p&gt;
&lt;p&gt;哈哈，其实很多东西都是瞎掰，各位看客权当笑话看就行。&lt;/p&gt;
&lt;p&gt;###再说迷茫&lt;/p&gt;
&lt;p&gt;我不知道别人怎样，反正作为我自己，是有些许迷茫的感觉——不知自己会从事什么，也不知自己可以深入什么。反正就一样：对很多东西都感觉兴趣。达到了别人眼中所谓的 &lt;code&gt;广度&lt;/code&gt;，殊不知自己 &lt;code&gt;深度&lt;/code&gt; 方面有太多的欠缺。&lt;br&gt;当有一天，有人问你：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你学过那么多的东西，到底有没有一样是你真正喜欢的东西？你有自己所深入了解过的领域吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一听如此言论，可能自己都会尴尬的无地自容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;回过头来想想自己到底在追求什么？&lt;/li&gt;
&lt;li&gt;自己明白自己真的追求什么吗？&lt;/li&gt;
&lt;li&gt;自己真的对自己有一个清晰的规划吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家都想做有广度，有深度的人。但其过程，也许只有真正的有广度、有深度的人才能体会。很多时候，作决定都是艰难的。冷静下来思考一翻，可能自己还是理不清头绪，但起码自己思考过，套用一话。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不在乎天长地长，至少我们曾经拥有。不在乎现在是否有结果，但至少我们曾经有过思考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;###题后&lt;/p&gt;
&lt;p&gt;想不到自己还是写到了最后，不说自己写了些什么，至少写的过程中，有些自己的考量。或许你们是觉得此博写得是如此的可笑，或许有一天我回头看的也觉得可笑。&lt;br&gt;但，那又怎样呢？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;###题外&lt;br&gt;自&lt;strong&gt;新蛋实习&lt;/strong&gt;至今，也有三个多月了吧。回想起那天面试的时候，还有些许的紧张，或许是自己知道的太少，或者是自己想表达的太多。反正初出茅庐的样子，让南哥见笑了好久（我猜的）。&lt;/p&gt;
&lt;p&gt;###题前&lt;/p&gt;
&lt;p&gt;新蛋算得上是我
    
    </summary>
    
    
      <category term="graduate" scheme="http://owenyang0.github.io/tags/graduate/"/>
    
      <category term="intern" scheme="http://owenyang0.github.io/tags/intern/"/>
    
      <category term="newegg" scheme="http://owenyang0.github.io/tags/newegg/"/>
    
  </entry>
  
</feed>
